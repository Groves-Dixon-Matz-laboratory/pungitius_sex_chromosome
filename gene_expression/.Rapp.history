#plot and do stats on pairwise dN/dS values from PAML#
setwd("~/gitreps/pungitius_sex_chromosome/degeneration/dnds")#
#function to do signed rank test between two chromosomes#
do.wilcox = function(sp1, sp2, df, stat){#
	stat1 = df[df$species == sp1, stat]#
	stat2 = df[df$species == sp2, stat]#
	sub = df[df$species %in% c(sp1, sp2),]#
	w=wilcox.test(x=stat1, y=stat2)#
	boxplot(sub[,stat]~sub[,'species'], outline=F, main=paste("p =",w$p.value))#
	return(w)#
}
#compare for pairwise against threespine#
d=read.table('ref_chrXII_pairwise_dNdS.tsv', header = T, stringsAsFactors=F)#
#
#plot for all mutations#
ad = d[!grepl('private', d$species),]#
boxplot(ad$dN~ad$species, outline=F, ylab='dN')#
boxplot(ad$dS~ad$species, outline=F, ylab='dS')#
boxplot(ad$dNdS~ad$species, outline=F, ylab="dN/dS")#
do.wilcox('X', 'tym', ad, 'dNdS')
#plot for "private" mutations#
pd = d[grepl('private', d$species),]#
boxplot(pd$dN~pd$species, outline=F, ylab='dN')#
boxplot(pd$dS~pd$species, outline=F, ylab='dS')#
boxplot(pd$dNdS~pd$species, outline=F, ylab='dN/dS')#
do.wilcox('Xprivate', 'tymprivate', pd, 'dNdS')#
do.wilcox('Xprivate', 'sinprivate', pd, 'dNdS')#
do.wilcox('Yprivate', 'sinprivate', pd, 'dNdS')#
do.wilcox('Xprivate', 'Yprivate', pd, 'dNdS')#
#look at X#
xd=read.table('X_pairwise_dNdS.tsv', header = T, stringsAsFactors=F)#
xd=sind[!grepl('private', xd$species),]#
boxplot(xd[,'dN']~xd$species, outline=F, ylab="pairwise dN vs sinensis", main='vs sinensis')#
boxplot(xd[,'dS']~xd$species, outline=F, ylab="pairwise dS vs sinensis", main='vs sinensis')#
boxplot(xd[,'dNdS']~xd$species, outline=F, ylab="pairwise dN/dS vs sinensis", main='vs sinensis')#
do.wilcox('X', 'Y', d, 'dS')#
do.wilcox('tym', 'Y', d, 'dS')
#look at sinensis#
sind=read.table('sin_pairwise_dNdS.tsv', header = T, stringsAsFactors=F)#
sind=sind[!grepl('private', sind$species),]#
boxplot(sind[,'dN']~sind$species, outline=F, ylab="pairwise dN vs sinensis", main='vs sinensis')#
boxplot(sind[,'dS']~sind$species, outline=F, ylab="pairwise dS vs sinensis", main='vs sinensis')#
boxplot(sind[,'dNdS']~sind$species, outline=F, ylab="pairwise dN/dS vs sinensis", main='vs sinensis')#
do.wilcox('X', 'Y', d, 'dS')#
do.wilcox('tym', 'Y', d, 'dS')
boxplot(sind[,'dS']~sind$species, outline=F, ylab="pairwise dS vs sinensis", main='vs sinensis')
#upload pairwise dNdS vs 3spine#
ddat = read.table("ref_pairwise_dNdS.tsv", header=T)#
ddat$geneId = sapply(as.character(ddat$gene), function(x) return(strsplit(x, "_")[[1]][1]))#
dim(ddat)#
ddat=ddat[!ddat$geneId %in% c12,]#
head(ddat)#
dim(ddat)
#full_dS.R#
#plot dS between species from autosomes to get idea of how closely related they are#
library(ggplot2)#
library(cowplot)#
library(scales)#
setwd("~/gitreps/pungitius_sex_chromosome/full_genome_dS")#
#upload gene location data#
gdat = read.table("gene_locations.txt", header = T)#
c12 = as.character(gdat[gdat$chr=='chrXII', 'geneId'])#
head(gdat)#
head(c12)#
#
#upload pairwise dNdS vs 3spine#
ddat = read.table("ref_pairwise_dNdS.tsv", header=T)#
ddat$geneId = sapply(as.character(ddat$gene), function(x) return(strsplit(x, "_")[[1]][1]))#
dim(ddat)#
ddat=ddat[!ddat$geneId %in% c12,]#
head(ddat)#
dim(ddat)
boxplot(ddat$dS~ddat$species, outline=F, ylab = "pairwise dS vs G. aculeatus")
mns = tapply(ddat$dS, INDEX=ddat$species, function(x) mean(x, na.rm=T))#
mns#
length(unique(ddat$geneId))#
#upload pairwise dNdS vs 3spine#
ddat = read.table("sin_pairwise_dNdS.tsv", header=T, stringsAsFactors=F)#
ddat=ddat[ddat$species!='ref',]#
head(ddat)
boxplot(ddat$dS~ddat$species, outline=F, ylab = "pairwise dS vs P. sinensis")#
mns = tapply(ddat$dS, INDEX=ddat$species, function(x) mean(x, na.rm=T))#
mns
ll=load("~/gitreps/pungitius_sex_chromosome/figure_plotting/pairwisedNdS.Rdata")
ll
boxplot(sind[,'dS']~sind$species, outline=F, ylab="pairwise dS vs sinensis", main='vs sinensis')
par(mfrow=c(3,1))
par(mfrow=c(1,3))
#upload pairwise dNdS vs 3spine#
ddat = read.table("ref_pairwise_dNdS.tsv", header=T)#
ddat$geneId = sapply(as.character(ddat$gene), function(x) return(strsplit(x, "_")[[1]][1]))#
dim(ddat)#
ddat=ddat[!ddat$geneId %in% c12,]#
head(ddat)#
dim(ddat)#
#
boxplot(ddat$dS~ddat$species, outline=F, ylab = "pairwise dS vs G. aculeatus")
par(mfrow=c(1,1))
boxplot(ddat$dS~ddat$species, outline=F, ylab = "pairwise dS vs G. aculeatus")
#upload pairwise dNdS vs 3spine#
ddats = read.table("sin_pairwise_dNdS.tsv", header=T, stringsAsFactors=F)#
ddats=ddats[ddats$species!='ref',]#
head(ddats)#
#
boxplot(ddats$dS~ddats$species, outline=F, ylab = "pairwise dS vs P. sinensis")#
mns = tapply(ddats$dS, INDEX=ddats$species, function(x) mean(x, na.rm=T))#
mns
boxplot(ddat$dS~ddat$species, outline=F, ylab = "pairwise dS vs G. aculeatus")
boxplot(ddats$dS~ddats$species, outline=F, ylab = "pairwise dS vs P. sinensis")
boxplot(sind[,'dS']~sind$species, outline=F, ylab="pairwise dS vs sinensis", main='vs sinensis')
boxplot(ddat$dS~ddat$species, outline=F, ylab = "pairwise dS vs G. aculeatus")
boxplot(ddats$dS~ddats$species, outline=F, ylab = "pairwise dS vs P. sinensis")
boxplot(sind[,'dS']~sind$species, outline=F, ylab="pairwise dS vs sinensis", main='vs sinensis')
#full_dS.R#
#plot dS between species from autosomes to get idea of how closely related they are#
library(ggplot2)#
library(cowplot)#
library(scales)#
setwd("~/gitreps/pungitius_sex_chromosome/full_genome_dS")#
#upload gene location data#
gdat = read.table("gene_locations.txt", header = T)#
c12 = as.character(gdat[gdat$chr=='chrXII', 'geneId'])#
head(gdat)#
head(c12)#
#
#upload pairwise dNdS vs 3spine#
ddat = read.table("ref_pairwise_dNdS.tsv", header=T)#
ddat$geneId = sapply(as.character(ddat$gene), function(x) return(strsplit(x, "_")[[1]][1]))#
dim(ddat)#
ddat=ddat[!ddat$geneId %in% c12,]#
head(ddat)#
dim(ddat)#
#
boxplot(ddat$dS~ddat$species, outline=F, ylab = "pairwise dS vs G. aculeatus")#
mns = tapply(ddat$dS, INDEX=ddat$species, function(x) mean(x, na.rm=T))#
mns#
length(unique(ddat$geneId))#
#upload pairwise dNdS vs 3spine#
ddats = read.table("sin_pairwise_dNdS.tsv", header=T, stringsAsFactors=F)#
ddats=ddats[ddats$species!='ref',]#
head(ddats)#
#
boxplot(ddats$dS~ddats$species, outline=F, ylab = "pairwise dS vs P. sinensis")#
mns = tapply(ddats$dS, INDEX=ddats$species, function(x) mean(x, na.rm=T))#
mns#
#show the sinensis dS#
ll=load("~/gitreps/pungitius_sex_chromosome/figure_plotting/pairwisedNdS.Rdata")#
boxplot(sind[,'dS']~sind$species, outline=F, ylab="pairwise dS vs sinensis", main='vs sinensis')#
#plot all three together#
par(mfrow=c(1,1))#
boxplot(ddat$dS~ddat$species, outline=F, ylab = "pairwise dS vs G. aculeatus")#
boxplot(ddats$dS~ddats$species, outline=F, ylab = "pairwise dS vs P. sinensis")#
boxplot(sind[,'dS']~sind$species, outline=F, ylab="pairwise dS vs sinensis", main='vs sinensis')
head(ddat)
bp1 = ggplot(ddat) + geom_boxplot(x=species, y=dS)#
plot(bp1)
bp1 = ggplot(ddat) + geom_boxplot(x=species, y=dS)
bp1 = ggplot(ddat) + geom_boxplot(aes(x=species, y=dS))
plot(bp1)
bp1 = ggplot(ddat) + #
	geom_boxplot(aes(x=species, y=dS)) +#
	limits(y=c(0,1))#
plot(bp1)
boxplot(ddat$dS~ddat$species, outline=F, ylab = "pairwise dS vs G. aculeatus")
bp1 = ggplot(ddat) + #
	geom_boxplot(aes(x=species, y=dS)) +#
	scale_y_continuous(limits=c(0,1))#
plot(bp1)
bp1 = ggplot(ddat) + #
	geom_boxplot(aes(x=species, y=dS)) +#
	scale_y_continuous(limits=c(0,0.25))#
plot(bp1)
bp2 = ggplot(ddats) + #
	geom_boxplot(aes(x=species, y=dS)) +#
	scale_y_continuous(limits=c(0,0.25))#
plot(bp2)
bp2 = ggplot(ddats) + #
	geom_boxplot(aes(x=species, y=dS)) +#
	scale_y_continuous(limits=c(0,0.1))#
plot(bp2)
?geom_boxplot
bp2 = ggplot(ddats) + #
	geom_boxplot(aes(x=species, y=dS, shape=2)) +#
	scale_y_continuous(limits=c(0,0.1))#
plot(bp2)
bp2 = ggplot(ddats) + #
	geom_boxplot(aes(x=species, y=dS, size=0)) +#
	scale_y_continuous(limits=c(0,0.1))#
plot(bp2)
bp2 = ggplot(ddats) + #
	geom_boxplot(aes(x=species, y=dS)) +#
	scale_y_continuous(limits=c(0,0.1))#
plot(bp2)
bp1 = ggplot(ddat) + #
	geom_boxplot(aes(x=species, y=dS)) +#
	scale_y_continuous(limits=c(0,0.25))#
plot(bp1)
bp2 = ggplot(ddats) + #
	geom_boxplot(aes(x=species, y=dS)) +#
	scale_y_continuous(limits=c(0,0.1))#
plot(bp2)
bp2 = ggplot(ddats) + #
	geom_boxplot(aes(x=species, y=dS), outlier.shape=F) +#
	scale_y_continuous(limits=c(0,0.1))#
plot(bp2)
bp2 = ggplot(ddats) + #
	geom_boxplot(aes(x=species, y=dS), outlier.shape=0) +#
	scale_y_continuous(limits=c(0,0.1))#
plot(bp2)
bp2 = ggplot(ddats) + #
	geom_boxplot(aes(x=species, y=dS), outlier.color=white) +#
	scale_y_continuous(limits=c(0,0.1))#
plot(bp2)
bp2 = ggplot(ddats) + #
	geom_boxplot(aes(x=species, y=dS), outlier.color=white) +#
	scale_y_continuous(limits=c(0,0.1))#
plot(bp2)
bp2 = ggplot(ddats) + #
	geom_boxplot(outlier.colour = "red", outlier.shape = 1, aes(x=species, y=dS)) +#
	scale_y_continuous(limits=c(0,0.1))#
plot(bp2)
bp2 = ggplot(ddats) + #
	geom_boxplot(outlier.colour = "white", outlier.shape = 1, aes(x=species, y=dS)) +#
	scale_y_continuous(limits=c(0,0.1))#
plot(bp2)
bp2 = ggplot(ddats) + #
	geom_boxplot(outlier.shape = 26, aes(x=species, y=dS)) +#
	scale_y_continuous(limits=c(0,0.1))#
plot(bp2)
bp2 = ggplot(ddats) + #
	geom_boxplot(outlier.shape = 26, aes(x=species, y=dS)) +#
	scale_y_continuous(limits=c(0,0.08))#
plot(bp2)
bp3 = ggplot(sind) + #
	geom_boxplot(outlier.shape = 26, aes(x=species, y=dS)) +#
	scale_y_continuous(limits=c(0,0.08))#
plot(bp2)
bp3 = ggplot(sind) + #
	geom_boxplot(outlier.shape = 26, aes(x=species, y=dS)) +#
	scale_y_continuous(limits=c(0,0.08))#
plot(bp3)
bp3 = ggplot(sind) + #
	geom_boxplot(outlier.shape = 26, aes(x=species, y=dS)) #
	# scale_y_continuous(limits=c(0,0.08))#
plot(bp3)
bp3 = ggplot(sind) + #
	geom_boxplot(outlier.shape = 26, aes(x=species, y=dS)) +#
	scale_y_continuous(limits=c(0,0.3))#
plot(bp3)
plot_grid(bp1, bp2, bp3)
plot_grid(bp1, bp2, bp3, nrow=1)
bp1 = ggplot(ddat) + #
	geom_boxplot(outlier.shape = 26, aes(x=species, y=dS)) +#
	scale_y_continuous(limits=c(0,0.25)) +#
	labs(x='')#
plot(bp1)#
#
bp2 = ggplot(ddats) + #
	geom_boxplot(outlier.shape = 26, aes(x=species, y=dS)) +#
	scale_y_continuous(limits=c(0,0.08)) +#
	labs(x='')#
plot(bp2)#
#
bp3 = ggplot(sind) + #
	geom_boxplot(outlier.shape = 26, aes(x=species, y=dS)) +#
	scale_y_continuous(limits=c(0,0.3)) +#
	labs(x='')#
plot(bp3)#
plot_grid(bp1, bp2, bp3, nrow=1)
plot_grid(bp1, bp2, bp3, nrow=1, labels=c("A","B","C"))
head(ddat)
table(ddat$species)
table(ddats$species)
table(sind)
table(sind$species)
9789+840
table(na.omit(ddat)$species)
table(na.omit(ddats)$species)
table(na.omit(sind)$species)
head(ddats)
ddats$geneId = sapply(as.character(ddats$gene), function(x) return(strsplit(x, "_")[[1]][1]))
head(ddats)
ddats=ddats[!ddats$geneId %in% c12,]
dim(ddats)
table(na.omit(ddats)$species)
bp1 = ggplot(ddat) + #
	geom_boxplot(outlier.shape = 26, aes(x=species, y=dS)) +#
	scale_y_continuous(limits=c(0,0.25)) +#
	labs(x='')#
plot(bp1)#
#
bp2 = ggplot(ddats) + #
	geom_boxplot(outlier.shape = 26, aes(x=species, y=dS)) +#
	scale_y_continuous(limits=c(0,0.08)) +#
	labs(x='')#
plot(bp2)#
#
bp3 = ggplot(sind) + #
	geom_boxplot(outlier.shape = 26, aes(x=species, y=dS)) +#
	scale_y_continuous(limits=c(0,0.3)) +#
	labs(x='')#
plot(bp3)#
plot_grid(bp1, bp2, bp3, nrow=1, labels=c("A","B","C"))
table(na.omit(sind)$species)
tapply(sind$dS, INDEX=sind$species)
tapply(sind$dS, INDEX=sind$species, median)
tapply(sind$dS, INDEX=sind$species, function(x) median(x, na.rm=T))
x=sind$dS[sind$species=='Y']
length(x)
y=sind$dS[sind$species=='tym']
t.test(x,y)
t.test(x,y, alternative = 'less')
tapply(sind$dS, INDEX=sind$species, function(x) mean(x, na.rm=T))
wilcox.test(x=x, y=y)
wilcox.test(x=ddat$dS[ddat$species=='pun'], y=ddat$dS[ddat$species=='tym'])
wilcox.test(x=ddat$dS[ddat$species=='sin'], y=ddat$dS[ddat$species=='tym'])
wilcox.test(x=ddat$dS[ddat$species=='sin'], y=ddat$dS[ddat$species=='pun'])
rm(list=ls())
#plot_figure6_degeneration.R#
#
library(ggplot2)#
library(cowplot)#
setwd("~/gitreps/pungitius_sex_chromosome/figure_plotting")#
#
#set up global plotting variables#
male.col = 'dodgerblue'#
female.col = 'firebrick'#
sin.col = 'forestgreen'#
tym.col = 'mediumseagreen'#
xlabAngle=20#
#
#load depth comparisons#
ll=load('depthPlots.Rdata')#
ll#
dp1 = dp1 + labs(x="Position (Mb)", y='M:F coverage', subtitle='G. aculeatus') + theme(plot.subtitle=element_text(face="italic")) #
dp2 = dp2 + labs(x="Position (Mb)", y='M:F coverage', subtitle='P. pungitius') + theme(plot.subtitle=element_text(face="italic")) #
plot_grid(dp1, dp2, ncol=2)#
#
#-------- REPETITIVE ELEMENT ENRICHMENT --------##
#LOAD DATA#
ll=load("repetitiveElements.Rdata")#
#rep.res = the DESeq2 results for repetitive elements#
#s = the set of repetitive elements with sinificantly different fold coverage between males and females#
#mt = the estimated proportion of reads mapped to repetitive elements#
ll#
#
#BUILD FIGURES#
#
#density plot#
den=density(s$log2FoldChange)#
den.df = data.frame(x=den$x, y=den$y)#
male.df = den.df[den.df$x >=max(den.df$x[den.df$x<0]),]#
female.df = den.df[den.df$x <= 0,]#
denRep=ggplot(data=female.df, aes(x=x, y=y)) + #
	geom_vline(aes(xintercept=0), linetype='dashed') +#
	geom_line(col=female.col) + #
	geom_area(fill=female.col) +#
	geom_line(data=male.df, aes(x=x,y=y), col=male.col) + #
	geom_area(data=male.df, aes(x=x,y=y), fill=male.col) +#
	lims(x=c(-3.3, 3.3)) +#
	# scale_x_continuous(limits = c(-0.03, 0.22)) +#
	# geom_segment(data=d12, aes(x=d, y=y1, xend=d, yend=y2), lineend='round', lwd=1.2) +#
	labs(x="", y="")#
plot(denRep)#
#stats#
rep.res$sig = rep.res$padj < 0.1#
m = rep.res[rep.res$log2FoldChange>0,]#
osig = sum(m$sig, na.rm=T)#
esig = round(sum(rep.res$sig, na.rm=T)/2, digits=0)#
ons = sum(!m$sig, na.rm=T)#
ens = round(sum(!rep.res$sig, na.rm=T)/2, digits=0)#
sig = c(osig, esig)#
notsig = c(ons, ens)#
stbl = rbind(sig, notsig)#
colnames(stbl) = c('observed', 'expected')#
fisher.test(stbl, alternative='greater')#
#
#BOXPLOT#
mt$pct = mt$x / 1e6 * 100#
repBox=ggplot(data=mt) + #
	geom_boxplot(aes(x=sex, y=pct), col=c(female.col, male.col), lwd=1) +#
	labs(y="% reads", x="Sex") +#
	labs(subtitle='Repetitive elements') #
	# lims(y=c(6.1, 6.65))#
plot(repBox)#
#
#stats#
tapply(mt$x, INDEX=mt$sex, mean)#
male = mt$x[mt$sex=="M"]#
female = mt$x[mt$sex=="F"]#
t.test(x=male, y=female, alternative='greater')#
# PLOT VOLCANO PLOT#
res.df = data.frame(rep.res)#
res.df$logp = -log(res.df$pvalue, 10)#
s.res.df = res.df[res.df$padj < 0.1,]#
male = rep('male (10)', nrow(s.res.df))#
male[s.res.df$log2FoldChange < 0]<-'female (3)'#
s.res.df$significant = male#
volcano = ggplot(data=res.df, aes(x=log2FoldChange, y=logp)) + #
	geom_point(col='black', alpha=0.3) +#
	geom_point(data=s.res.df, aes(x=log2FoldChange, y=logp, col=significant), size=2.5) +#
	scale_colour_manual(values=c('firebrick','dodgerblue')) +#
	xlab(bquote(log[2]*"(M:F)")) +#
	ylab(bquote(-log[10]*"(p)" )) +#
	# lims(x=c(-3.2, 3.2), y=c(0, 20)) +#
	labs(subtitle='Repetitive elements') +#
	theme(legend.position="none")#
plot(volcano)#
#
volcanoLenged = ggplot(data=res.df, aes(x=log2FoldChange, y=logp)) + #
	geom_point(col='black', alpha=0.3) +#
	geom_point(data=s.res.df, aes(x=log2FoldChange, y=logp, col=significant), size=2.5) +#
	scale_colour_manual(values=c('firebrick','dodgerblue')) +#
	xlab(bquote(log[2]*"(M:F)")) +#
	ylab(bquote(-log[10]*"(p)" )) +#
	labs(subtitle='Repetitive\nelements') +#
	lims(x=c(-3.2, 3.2), y=c(0,17)) #
plot(volcanoLenged)#
#
plot_grid(denRep, repBox, ncol=2)#
plot_grid(volcano, repBox, ncol=2)#
#
#====================================================##
#
#------------------ PAIRWISE dN/dS against 3-spine ------------------##
#The ggplot boxplots are strange, so went with violin plots, with the median values drawn manually#
#
#LOAD#
ll=load('pairwisedNdS.Rdata')#
#ad = 'all data' these are the dNdS values for all variants#
#pd = 'private data' these are the dNdS values based only on private variants#
#sind = 'sin dnds' these are the pairwise comparisons with sinensis for all varants#
pd$species=sub('private', '', pd$species)#
ll#
#
do.wilcox = function(sp1, sp2, df, stat){#
	stat1 = df[df$species == sp1, stat]#
	stat2 = df[df$species == sp2, stat]#
	sub = df[df$species %in% c(sp1, sp2),]#
	w=wilcox.test(x=stat1, y=stat2)#
	boxplot(sub[,stat]~sub[,'species'], outline=F, main=paste("p =",w$p.value))#
	return(w)#
}#
#ALL VARINATS VIOLIN PLOT#
#set up data to plot species in order#
spp=ad$species#
spp[spp=="Y"]<-"punY"#
spp[spp=="X"]<-"punX"#
ad$species=spp#
ad$species = factor(ad$species, levels=c("tym", "sin", "punY", "punX"), ordered=T)#
levels(ad$species)#
#
#set up data for line segments at medians#
meds = data.frame(tapply(ad$dNdS, INDEX=ad$species, function(x) median(x, na.rm=T)))#
colnames(meds) = c('y')#
meds$x1 = 1:4 - 0.2#
meds$x2 = 1:4 + 0.2#
all.dnds.violin = ggplot(data=ad) + #
	geom_violin(aes(x=species, y=dNdS, fill=species, col=species), na.rm=T) +#
	# geom_point(data=pmeds, aes(x=x, y=y), pch="-", size=10) +#
	geom_segment(data=meds, aes(x=x1, y=y, xend=x2, yend=y), lwd=1.5) +#
	scale_color_manual(values=c(sin.col, tym.col, female.col, male.col)) +#
	scale_fill_manual(values=c(sin.col, tym.col, female.col, male.col)) +#
	# scale_x_discrete(breaks=1:4, labels=names(num)) +#
	lims(y=c(-.1, 0.5)) +#
	labs(y='dN/dS', x='', subtitle='All variants') +#
	theme(legend.position="none",axis.text.x = element_text(angle= xlabAngle))#
print(all.dnds.violin)#
#
#standard boxplot to doublecheck the figure#
quartz()#
boxplot(ad$dNdS~ad$species, outline=F)#
#make a similar figure for pairwise dS against 3-spine#
meds = data.frame(tapply(ad$dS, INDEX=ad$species, function(x) median(x, na.rm=T)))#
colnames(meds) = c('y')#
meds$x1 = 1:4 - 0.2#
meds$x2 = 1:4 + 0.2#
all.dS.violin = ggplot(data=ad) + #
	geom_violin(aes(x=species, y=dS, fill=species, col=species), na.rm=T) +#
	# geom_point(data=pmeds, aes(x=x, y=y), pch="-", size=10) +#
	geom_segment(data=meds, aes(x=x1, y=y, xend=x2, yend=y), lwd=1.5) +#
	scale_color_manual(values=c(sin.col, tym.col, female.col, male.col)) +#
	scale_fill_manual(values=c(sin.col, tym.col, female.col, male.col)) +#
	lims(y=c(-.1, 0.5)) +#
	labs(y='pairwise dS vs G. aculeatus', x='', subtitle='All variants') +#
	theme(legend.position="none",axis.text.x = element_text(angle= xlabAngle))#
print(all.dS.violin)#
#
#standard boxplot to doublecheck the figure#
quartz()#
boxplot(ad$dS~ad$species, outline=F)#
#
#PRIVATE VARIANTS VIOLIN PLOT#
#
#set up data to plot species in order#
spp=pd$species#
spp[spp=="Y"]<-"punY"#
spp[spp=="X"]<-"punX"#
pd$species=spp#
pd$species = factor(pd$species, levels=c("tym", "sin", "punY", "punX"), ordered=T)#
levels(pd$species)#
#
#set up medians#
pmeds = data.frame(tapply(pd$dNdS, INDEX=pd$species, function(x) median(x, na.rm=T)))#
colnames(pmeds) = c('y')#
pmeds$spp = rownames(pmeds)#
pmeds$x1 = 1:4 - 0.2#
pmeds$x2 = 1:4 + 0.2#
pmeds#
#
private.dnds.violin = ggplot(data=pd) + #
	geom_violin(aes(x=species, y=dNdS, fill=species, col=species), na.rm=T) +#
	geom_segment(data=pmeds, aes(x=x1, y=y, xend=x2, yend=y), lwd=1) +#
	scale_color_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	# scale_x_discrete(breaks=1:4, labels=names(num)) +#
	lims(y=c(-.1, 0.5)) +#
	labs(y='dN/dS', x='', subtitle ='Private variants') +#
	theme(legend.position="none",axis.text.x = element_text(angle= xlabAngle))#
print(private.dnds.violin)#
#
#boxplot to doublecheck#
quartz()#
boxplot(pd$dNdS~pd$species, outline=F, ylim=c(-.1, 0.5))#
#
#stats#
do.wilcox('X', 'tym', pd, 'dNdS')#
do.wilcox('X', 'sin', pd, 'dNdS')#
do.wilcox('Y', 'sin', pd, 'dNdS')#
do.wilcox('X', 'Y', pd, 'dNdS')#
#REPEAT THE PRIVATE VIOLIN PLOT FOR dS against 3-spine#
#
#set up medians#
pmeds = data.frame(tapply(pd$dS, INDEX=pd$species, function(x) median(x, na.rm=T)))#
colnames(pmeds) = c('y')#
pmeds$spp = rownames(pmeds)#
pmeds$x1 = 1:4 - 0.2#
pmeds$x2 = 1:4 + 0.2#
pmeds#
#
private.dS.violin = ggplot(data=pd) + #
	geom_violin(aes(x=species, y=dS, fill=species, col=species), na.rm=T) +#
	geom_segment(data=pmeds, aes(x=x1, y=y, xend=x2, yend=y), lwd=1) +#
	scale_color_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	# scale_x_discrete(breaks=1:4, labels=names(num)) +#
	lims(y=c(-.01, 0.1)) +#
	labs(y='pairwise dS vs G. aculeatus', x='', subtitle ='Private variants') +#
	theme(legend.position="none",axis.text.x = element_text(angle= xlabAngle))#
print(private.dS.violin)#
#
#boxplot to doublecheck#
quartz()#
boxplot(pd$dNdS~pd$species, outline=F, ylim=c(-.1, 0.5))#
#-------- PROVEAN RESULTS --------##
ll=load("provean.Rdata")#
#d = the provean scores#
#psub = the provean scores for mutations private to each species/chromosomes#
#ratios = the ratio of bad to ok mutations (bad <= -2.5 score)#
#private.ratios = same but for private mutations#
#tbl = the table of bad and ok mutations to use for chi square test#
#private.tbl = same but for private mutations#
colnames(d)[7]='species'#
colnames(psub)[7]='species'#
# d$score = d$score*-1#
# psub$score = psub$score*-1#
head(d)#
head(psub)#
#
#ALL VARIANTS#
#
#set up ordered species names#
spp=d$species#
spp[spp=="y"]<-"punY"#
spp[spp=="x"]<-"punX"#
d$sppNum = factor(spp, levels=c("tym", "sin", "punY", "punX"), ordered=T)#
levels(d$sppNum)#
#
#set up medians#
dmeds = data.frame(tapply(d$score, INDEX=d$sppNum, function(x) median(x, na.rm=T)))#
colnames(dmeds) = c('y')#
dmeds$sppNum = rownames(dmeds)#
dmeds$x1 = 1:4 - 0.2#
dmeds$x2 = 1:4 + 0.2#
dmeds#
#plot violin plot#
all.provean.violin = ggplot(data=d) +#
	geom_violin(aes(x=sppNum, y=score, col=sppNum, fill=sppNum), na.rm=T) +#
	geom_segment(data=dmeds, aes(x=x1, y=y, xend=x2, yend=y), lwd=1) +#
	scale_color_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	# scale_x_discrete(breaks=1:4, labels=names(num)) +#
	labs(y='Provean score', x='', subtitle='All variants') + #
	theme(legend.position='none',axis.text.x = element_text(angle= xlabAngle))#
plot(all.provean.violin)#
#set up frequencies of bad (< -2.5) and ok (> -2.5)#
#PRIVATE VARIANTS#
#set up ordered species names#
spp=psub$species#
spp[spp=="y"]<-"punY"#
spp[spp=="x"]<-"punX"#
psub$sppNum = factor(spp, levels=c("tym", "sin", "punY", "punX"), ordered=T)#
levels(psub$sppNum)#
#
#set up medians#
psmeds = data.frame(tapply(psub$score, INDEX=psub$sppNum, function(x) median(x, na.rm=T)))#
colnames(psmeds) = c('y')#
psmeds$sppNum = rownames(psmeds)#
psmeds$spp = spp#
psmeds$x1 = 1:4 - 0.2#
psmeds$x2 = 1:4 + 0.2#
psmeds#
#
#plot violin plot#
private.provean.violin = ggplot(data=psub) +#
	geom_violin(aes(x=sppNum, y=score, col=sppNum, fill=sppNum), na.rm=T) +#
	geom_segment(data=psmeds, aes(x=x1, y=y, xend=x2, yend=y), lwd=1) +#
	scale_color_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	labs(y='Provean score', x='', subtitle="Private variants") + #
	theme(legend.position='none',#
		axis.text.x = element_text(angle= xlabAngle))#
plot(private.provean.violin)#
#standard boxplots to doublecheck#
boxplot(d$score~d$sppNum, outline=F)#
boxplot(psub$score~psub$sppNum, outline=F)#
#PLOT THRESHOLD BASED WAY#
prov.dat = psub#
CUT=-2.5#
#
get_ratios = function(prov.dat, cutoff){#
	prov.dat$bad = as.numeric(prov.dat$score <= cutoff)#
	prov.dat$ok = as.numeric(prov.dat$score > cutoff)#
	sums = tapply(prov.dat$bad, INDEX= prov.dat$sppNum, function(x) sum(x, na.rm=T))#
	oksums = tapply(prov.dat$ok, INDEX= prov.dat$sppNum, function(x) sum(x, na.rm=T))#
	private.ratios = data.frame( (sums / (sums + oksums)))#
	colnames(private.ratios) = c('pscore')#
	private.ratios$sppNum = factor(rownames(private.ratios), ordered=T, levels = c('tym', 'sin', 'punY', 'punX'))#
	private.tbl = rbind(sums, oksums)#
	res = list(private.ratios, private.tbl)#
	return(res)#
}#
all.res = get_ratios(d, CUT)#
private.res = get_ratios(psub, CUT)#
a.ratios =all.res[[1]]#
p.ratios = private.res[[1]]#
a.counts = all.res[[2]]#
p.counts = private.res[[2]]#
#
all.prov.barplot = ggplot(a.ratios) + #
	geom_bar(aes(y=pscore, x=sppNum, fill=sppNum), stat='identity') +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	labs(subtitle="All variants", y = "provean < -2.5", x='') +#
	theme(legend.position='none',#
		axis.text.x = element_text(angle= xlabAngle))#
plot(all.prov.barplot)#
#
p.prov.barplot = ggplot(p.ratios) + #
	geom_bar(aes(y=pscore, x=sppNum, fill=sppNum), stat='identity') +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	labs(subtitle = "Private variants", y = "provean < -2.5", x='') +#
	theme(legend.position='none',#
		axis.text.x = element_text(angle= xlabAngle))#
plot(p.prov.barplot)#
#
#DO STATS#
#
siny = psub[psub$sppNum %in% c('sin', 'punY'),]#
siny$sample=as.factor(siny$sppNum)#
t.test(siny$score~ siny$sample)#
#
head(psub)#
do.wilcox('y', 'sin', psub, 'score')#
do.wilcox('y', 'tym', psub, 'score')#
do.wilcox('y', 'x', psub, 'score')#
do.wilcox('x', 'sin', psub, 'score')#
do.wilcox('x', 'tym', psub, 'score')#
#
#fisher's exact#
chisq.test(p.counts[,c('punY','sin')])#
chisq.test(p.counts[,c('punY','punX')])#
chisq.test(p.counts[,c('sin','punX')])#
chisq.test(private.tbl[,c('sin','y')])#
#---- PLOT ALL TOGETHER ----
head(d)
table(d$sppNum)
head(pd)
table(pd$species)
head(psub)
table(psub$sppNum)
tapply(sind$dS, INDEX=sind$species, function(x) mean(x, na.rm=T))
tapply(ddats$dS, INDEX= ddats$species, function(x) mean(x, na.rm=T))
tapply(ddats$dS, INDEX= ddats$species, function(x) mean(x, na.rm=T))
#full_dS.R#
#plot dS between species from autosomes to get idea of how closely related they are#
library(ggplot2)#
library(cowplot)#
library(scales)#
setwd("~/gitreps/pungitius_sex_chromosome/full_genome_dS")#
#upload gene location data#
gdat = read.table("gene_locations.txt", header = T)#
c12 = as.character(gdat[gdat$chr=='chrXII', 'geneId'])#
head(gdat)#
head(c12)#
#
#upload pairwise dNdS vs 3spine#
ddat = read.table("ref_pairwise_dNdS.tsv", header=T)#
ddat$geneId = sapply(as.character(ddat$gene), function(x) return(strsplit(x, "_")[[1]][1]))#
dim(ddat)#
ddat=ddat[!ddat$geneId %in% c12,]#
head(ddat)#
dim(ddat)#
#
boxplot(ddat$dS~ddat$species, outline=F, ylab = "pairwise dS vs G. aculeatus")#
mns = tapply(ddat$dS, INDEX=ddat$species, function(x) mean(x, na.rm=T))#
mns#
length(unique(ddat$geneId))#
#upload pairwise dNdS vs 3spine#
ddats = read.table("sin_pairwise_dNdS.tsv", header=T, stringsAsFactors=F)#
ddats=ddats[ddats$species!='ref',]#
ddats$geneId = sapply(as.character(ddats$gene), function(x) return(strsplit(x, "_")[[1]][1]))#
ddats=ddats[!ddats$geneId %in% c12,]#
head(ddats)#
dim(ddats)#
#
boxplot(ddats$dS~ddats$species, outline=F, ylab = "pairwise dS vs P. sinensis")#
mns = tapply(ddats$dS, INDEX=ddats$species, function(x) mean(x, na.rm=T))#
mns#
#show the sinensis dS#
ll=load("~/gitreps/pungitius_sex_chromosome/figure_plotting/pairwisedNdS.Rdata")#
boxplot(sind[,'dS']~sind$species, outline=F, ylab="pairwise dS vs sinensis", main='vs sinensis')#
#plot all three together#
par(mfrow=c(1,1))#
boxplot(ddat$dS~ddat$species, outline=F, ylab = "pairwise dS vs G. aculeatus")#
boxplot(ddats$dS~ddats$species, outline=F, ylab = "pairwise dS vs P. sinensis")#
boxplot(sind[,'dS']~sind$species, outline=F, ylab="pairwise dS vs sinensis", main='vs sinensis')#
bp1 = ggplot(ddat) + #
	geom_boxplot(outlier.shape = 26, aes(x=species, y=dS)) +#
	scale_y_continuous(limits=c(0,0.25)) +#
	labs(x='')#
plot(bp1)#
#
bp2 = ggplot(ddats) + #
	geom_boxplot(outlier.shape = 26, aes(x=species, y=dS)) +#
	scale_y_continuous(limits=c(0,0.08)) +#
	labs(x='')#
plot(bp2)#
#
bp3 = ggplot(sind) + #
	geom_boxplot(outlier.shape = 26, aes(x=species, y=dS)) +#
	scale_y_continuous(limits=c(0,0.3)) +#
	labs(x='')#
plot(bp3)#
plot_grid(bp1, bp2, bp3, nrow=1, labels=c("A","B","C"))#
#
#stats#
table(na.omit(ddat)$species)#
table(na.omit(ddats)$species)#
table(na.omit(sind)$species)#
tapply(sind$dS, INDEX=sind$species, function(x) median(x, na.rm=T))#
tapply(sind$dS, INDEX=sind$species, function(x) mean(x, na.rm=T))#
tapply(ddats$dS, INDEX= ddats$species, function(x) mean(x, na.rm=T))
head(ddats)
rm(list=ls())
#plot dS between species from autosomes to get idea of how closely related they are#
library(ggplot2)#
library(cowplot)#
library(scales)#
setwd("~/gitreps/pungitius_sex_chromosome/full_genome_dS")#
#upload gene location data#
gdat = read.table("gene_locations.txt", header = T)#
c12 = as.character(gdat[gdat$chr=='chrXII', 'geneId'])#
head(gdat)#
head(c12)#
#
#upload pairwise dNdS vs 3spine#
ddat = read.table("ref_pairwise_dNdS.tsv", header=T)#
ddat$geneId = sapply(as.character(ddat$gene), function(x) return(strsplit(x, "_")[[1]][1]))#
dim(ddat)#
ddat=ddat[!ddat$geneId %in% c12,]#
head(ddat)#
dim(ddat)#
#
boxplot(ddat$dS~ddat$species, outline=F, ylab = "pairwise dS vs G. aculeatus")#
mns = tapply(ddat$dS, INDEX=ddat$species, function(x) mean(x, na.rm=T))#
mns#
length(unique(ddat$geneId))#
#upload pairwise dNdS vs 3spine#
ddats = read.table("sin_pairwise_dNdS.tsv", header=T, stringsAsFactors=F)#
ddats=ddats[ddats$species!='ref',]#
ddats$geneId = sapply(as.character(ddats$gene), function(x) return(strsplit(x, "_")[[1]][1]))#
ddats=ddats[!ddats$geneId %in% c12,]#
head(ddats)#
dim(ddats)
setwd("~/gitreps/pungitius_sex_chromosome/degeneration/full_genome_dS")
#upload gene location data#
gdat = read.table("gene_locations.txt", header = T)#
c12 = as.character(gdat[gdat$chr=='chrXII', 'geneId'])#
head(gdat)#
head(c12)#
#
#upload pairwise dNdS vs 3spine#
ddat = read.table("ref_pairwise_dNdS.tsv", header=T)#
ddat$geneId = sapply(as.character(ddat$gene), function(x) return(strsplit(x, "_")[[1]][1]))#
dim(ddat)#
ddat=ddat[!ddat$geneId %in% c12,]#
head(ddat)#
dim(ddat)#
#
boxplot(ddat$dS~ddat$species, outline=F, ylab = "pairwise dS vs G. aculeatus")#
mns = tapply(ddat$dS, INDEX=ddat$species, function(x) mean(x, na.rm=T))#
mns#
length(unique(ddat$geneId))
#upload pairwise dNdS vs 3spine#
ddats = read.table("sin_pairwise_dNdS.tsv", header=T, stringsAsFactors=F)#
ddats=ddats[ddats$species!='ref',]#
ddats$geneId = sapply(as.character(ddats$gene), function(x) return(strsplit(x, "_")[[1]][1]))#
ddats=ddats[!ddats$geneId %in% c12,]#
head(ddats)#
dim(ddats)#
#
boxplot(ddats$dS~ddats$species, outline=F, ylab = "pairwise dS vs P. sinensis")#
mns = tapply(ddats$dS, INDEX=ddats$species, function(x) mean(x, na.rm=T))#
mns
table(ddats$species)
table(na.omit(ddats)$species)
23*2
#plot_figure7_expression.R#
#This is a cleaned version of plot_figure7_exploratory.R#
#That one has a lot more in case these break or aren't clear#
setwd("~/gitreps/pungitius_sex_chromosome/figure_plotting/")#
ll=load("fig7_files.Rdata")#
#---------- PLOT ALL TOGETHER ----------##
#Figure 7:#
quartz()#
plot_grid(absBox, labels='')#
quartz()#
plot_grid(xyscatter.w2, xyscatter.vh, ncol=2, label_size =16, axis='b')#
#
#supplemental showing its not degeneration#
plot(denRepMG)#
plot(denRepFM)#
plot_grid(denRepFM, denRepMG, labels=c('A', 'B'), ncol=1, label_size =16)#
#---------- STATS ----------##
#
#STATS FOR BOXPLOTS#
do.wilcox = function(sp1, sp2, df, col, stat){#
	stat1 = df[df[,col] == sp1, stat]#
	stat2 = df[df[,col] == sp2, stat]#
	sub = df[df[,col] %in% c(sp1, sp2),]#
	w=wilcox.test(x=stat1, y=stat2)#
	boxplot(sub[,stat]~sub[,col], outline=F, main=paste("p =",w$p.value))#
	return(w)#
}#
do.wilcox('SDR_brain-dna', 'auto_brain-dna', ssr, 'sexdf', 'absDiff')#
do.wilcox('SDR_pelvic-dna', 'auto_pelvic-dna', ssr, 'sexdf', 'absDiff')#
do.wilcox('SDR_acu', 'auto_acu', ssr, 'sexdf', 'absDiff')#
#STATS FOR SCATTERPLOTS#
#
#for dna controlled brain scatterplot#
plot(m$fc~m$fcYX)#
lmw=lm(m$fc~m$fcYX)#
abline(lmw, col='red')#
summary(lmw)#
#for von Hippel scatterplot#
plot(m.vh$log2FoldChange.y~m.vh$log2FoldChange.x)#
lmvh=lm(m.vh$log2FoldChange.y~m.vh$log2FoldChange.x)#
abline(lmvh, col='red')#
summary(lmvh)
ll
summary(lmvh)
summary(lmw)
#plot_figure7_exploratory.R#
#This is a messy version of the plotting script that explores different ways of looking at the results#
#For final clean copy see ~/gitreps/pungitius_sex_chromosome/figure_plotting/plot_figure7_expression.R#
#
library(ggplot2)#
library(cowplot)#
setwd("~/gitreps/pungitius_sex_chromosome/gene_expression/")#
#-------- MORE DIFFERENTIAL EXPRESSION ON 12 --------##
#
#load the ancestral comparison (white)#
ll=load('~/gitreps/pungitius_sex_chromosome/gene_expression/baseline_gene_expression/pungitiusAncCompare.Rdata')#
#ddat = assembly of male:female differences with chromosomal region labeled #
#sdr.mr = the pungitius male vs 3spine male differences within the SDR#
#format the data#
ddat$absDiff = abs(ddat$diff)  #absolute M:F variation#
ddat$type2=ddat$type            #set up region with rest of chr12 (not PAR)#
ddat$type2[ddat$type==4]<-3    ##
head(ddat)#
ddat$sex.chrom = ddat$chr#
ddat$sex.chrom[ddat$sex.chrom!='chrXII']<-'autosomes'#
ddat$sex.chrom<-factor(ddat$sex.chrom, levels=c('chrXII', 'autosomes'), ordered=TRUE)#
#
#M:F DIFF IN SEX VS AUTOSOME#
#
#boxplot#
mfChrom = ggplot(data=ddat) +#
	geom_boxplot(aes(x= sex.chrom, y=absDiff), outlier.shape=26) + #
	lims(y=c(0,0.75)) +#
	labs(x='', y="abs(M:F)")#
plot(mfChrom)#
#
#violin#
mfViolin = ggplot(ddat) + #
	geom_violin(aes(x= sex.chrom, y=diff))#
plot(mfViolin)#
#UPLOAD THE MALE:FEMALE COMPARISON#
#
ll=load("~/gitreps/pungitius_sex_chromosome/gene_expression/baseline_gene_expression/maleVfemalePungitius.Rdata")#
ll#
#gsdf = the male vs female in pungitius differences with SDR labeled#
#format#
sdr = gsdf[gsdf$type==3,]#
den=density(sdr$log2FoldChange)#
den.df = data.frame(x=den$x, y=den$y)#
male.df = den.df[den.df$x >=max(den.df$x[den.df$x<0]),]#
female.df = den.df[den.df$x <= 0,]#
male.df$df = 'higher in males'#
female.df$df = 'higher in females'#
male.col = 'dodgerblue'#
female.col = 'firebrick'#
denRepFM=ggplot(data=female.df) + #
	# geom_vline(aes(xintercept=0), linetype='dashed') +#
	geom_line(aes(x=x, y=y, color=df), na.rm=T) + #
	geom_area(aes(x=x, y=y, fill=df), na.rm=T) +#
	geom_line(data=male.df, aes(x=x,y=y, color=df), na.rm=T) + #
	geom_area(data=male.df, aes(x=x,y=y, fill=df), na.rm=T) +#
	scale_color_manual(values=c(female.col, male.col)) +#
	scale_fill_manual(values=c(female.col, male.col)) +#
	theme(legend.position=c(0.6, 0.75),#
		legend.title=element_blank()) +#
	labs(x=bquote(log[2]~"M:F pungitius"), y="density")#
plot(denRepFM)#
#look for degeneration of transcription from Y as preferential loss in male pun expression#
head(sdr.mr)#
den=density(sdr.mr$log2FoldChange)#
den.df = data.frame(x=den$x, y=den$y)#
pun.df = den.df[den.df$x >=max(den.df$x[den.df$x<0]),]#
gacu.df = den.df[den.df$x <= 0,]#
pun.df$df = 'higher in pungitius males'#
gacu.df$df = ' higher in G.aculeatus males'#
denRepMG=ggplot(data= pun.df) + #
	geom_line(aes(x=x, y=y, color=df), na.rm=T) + #
	geom_area(aes(x=x, y=y, fill=df), na.rm=T) +#
	geom_line(data= gacu.df, aes(x=x,y=y, color=df), na.rm=T) + #
	geom_area(data= gacu.df, aes(x=x,y=y, fill=df), na.rm=T) +#
	theme(legend.position=c(0.6, 0.75),#
		legend.title=element_blank()) +#
	labs(x=bquote(log[2]~" pungitius male : G.aculeatus male"), y="density")#
plot(denRepMG)#
#
#plot both#
plot_grid(denRepFM, denRepMG, labels=c('A', 'B'), ncol=1, label_size =16)
#-------- DISTRIBUTIONS IN M:F FOLD COVERAGE --------##
#
#load m:f fold differences DNA#
ll=load("~/gitreps/pungitius_sex_chromosome/gene_expression/baseline_gene_expression/maleVfemale_DNA.Rdata")#
ll#
dsr = data.frame(dna.sr$log2FoldChange)#
colnames(dsr) = c('fc')#
dsr$dset = 'dna'#
dsr$geneId = rownames(dna.sr)#
head(dsr)#
#load differential expression by sex (von Hippel)#
ll=load("~/gitreps/pungitius_sex_chromosome/gene_expression/baseline_gene_expression/maleVfemale_vonHippel.Rdata")#
vsr = data.frame(s.r$log2FoldChange)#
colnames(vsr) = c('fc')#
vsr$dset = 'pelvic'#
vsr$geneId = rownames(s.r)#
head(vsr)#
#
#load differential expression by sex (white)#
ll=load("~/gitreps/pungitius_sex_chromosome/gene_expression/baseline_gene_expression/maleVfemalePungitius.Rdata")#
wsr = data.frame(s.r$log2FoldChange)#
colnames(wsr) = c('fc')#
wsr$dset = 'brain'#
wsr$geneId = rownames(s.r)#
head(wsr)#
#
#load differential expression by sex in 3-spine (white)#
ll=load("~/gitreps/pungitius_sex_chromosome/gene_expression/baseline_gene_expression/maleVfemale3spine.Rdata")#
tsr = data.frame(s.r$log2FoldChange)#
colnames(tsr) = c('fc')#
tsr$dset = 'acu'#
tsr$geneId = rownames(s.r)#
head(tsr)#
#CONTROL FOR MAPPING EFFICIENCY PEVLIC DATA#
#to control for changes in mapping efficiency, substract#
#the DNA fold differences from the RNA fold differences#
dd = merge(vsr, dsr, by = 'geneId')#
dd$fc = dd$fc.x - dd$fc.y#
dd$dset = 'pelvic-dna'#
pdsr=dd[,c('fc', 'dset', 'geneId')]#
head(pdsr)#
#
# see if the dna fold differences predict the RNA differences#
ddg=merge(dd, gdat, by = 'geneId')#
#
#for sdr#
ddsdr = ddg[ddg$type==3,]#
plot(ddsdr$fc.x~ddsdr$fc.y)#
lm1=lm(ddsdr$fc.x~ddsdr$fc.y)#
abline(lm1, col='red')#
summary(lm1)#
#
#for autosomes#
ddauto = ddg[ddg$type==1,]#
plot(ddauto$fc.x~ ddauto$fc.y)#
lm2=lm(ddauto$fc.x~ ddauto$fc.y)#
abline(lm2, col='red')#
summary(lm2)#
#CONTROL FOR MAPPING EFFICIENCY brain DATA#
dd = merge(wsr, dsr, by = 'geneId')#
dd$fc = dd$fc.x - dd$fc.y#
dd$dset = 'brain-dna'#
ddsr=dd[,c('fc', 'dset', 'geneId')]#
head(ddsr)#
#
# see if the dna fold differences predict the RNA differences#
ddg=merge(dd, gdat, by = 'geneId')#
#
#for sdr#
#This shows that there is indeed an effect of mapping efficiency#
ddsdr = ddg[ddg$type==3,]#
plot(ddsdr$fc.x~ddsdr$fc.y)#
lm1=lm(ddsdr$fc.x~ddsdr$fc.y)#
abline(lm1, col='red')#
summary(lm1)#
#
#for autosomes#
ddauto = ddg[ddg$type==1,]#
plot(ddauto$fc.x~ ddauto$fc.y)#
lm2=lm(ddauto$fc.x~ ddauto$fc.y)#
abline(lm2, col='red')#
summary(lm2)#
#ASSEMBLE ALL THE MALE:FEMALE DATA TOGETHER#
sr = rbind(dsr, vsr, wsr, tsr, ddsr, pdsr)#
head(sr)#
#add genomic locations#
head(gdat)#
msr = merge(sr, gdat, by='geneId', all.x=T)#
msr$sex = 'auto'#
# # msr$sex[msr$chr=='chrXII']<-'chrXII' #to use full chrXII#
msr$sex[msr$type==3]<-'SDR' #to use SDR#
msr$sex = factor(msr$sex, levels=c('SDR', 'auto'), ordered=T)#
msr$sexdf = paste(msr$sex, msr$dset, sep="_")#
msr$absDiff = abs(msr$fc)#
msr$sexdf = factor(msr$sexdf, levels=c('SDR_brain', 'auto_brain', 'SDR_acu', 'auto_acu', 'SDR_pelvic', 'auto_pelvic', 'SDR_dna', 'auto_dna', 'SDR_brain-dna', 'auto_brain-dna', 'SDR_pelvic-dna', 'auto_pelvic-dna'), ordered=T)#
boxplot(msr$absDiff~msr$sexdf, outline=F)#
#subset#
keep = c('SDR_pelvic-dna', 'auto_pelvic-dna', 'SDR_brain-dna', 'auto_brain-dna', 'SDR_acu', 'auto_acu')#
ssr = msr[msr$sexdf %in% keep,]#
ssr$sexdf = factor(ssr$sexdf, levels=keep, ordered=T)#
smeds = tapply(ssr$absDiff, INDEX=ssr$sexdf, function(x) median(x, na.rm=T))#
meddf = data.frame(y=smeds)#
meddf$sexdf = names(smeds)#
lineLen = 0.3#
meddf$x1 = 1:6 - lineLen#
meddf$x2 = 1:6 + lineLen#
#
#plot main boxplot#
absBox = ggplot(data=ssr) +#
	geom_boxplot(aes(x=sexdf, y=absDiff, fill=sex), outlier.shape=26, lwd=0.75) +#
	lims(y=c(-.1, 2)) + #
	labs(x='', y=bquote("|"*log[2]~"M:F|")) +#
	theme(axis.text.x = element_blank(),#
		axis.line.x = element_line(size=0),#
		axis.ticks.x = element_blank(), #
		legend.title=element_blank(),#
		legend.position=c(0.7, 0.8))#
plot(absBox)#
do.wilcox = function(sp1, sp2, df, col, stat){#
	stat1 = df[df[,col] == sp1, stat]#
	stat2 = df[df[,col] == sp2, stat]#
	sub = df[df[,col] %in% c(sp1, sp2),]#
	w=wilcox.test(x=stat1, y=stat2)#
	boxplot(sub[,stat]~sub[,col], outline=F, main=paste("p =",w$p.value))#
	return(w)#
}#
do.wilcox('SDR_brain-dna', 'auto_brain-dna', ssr, 'sexdf', 'absDiff')#
do.wilcox('SDR_pelvic-dna', 'auto_pelvic-dna', ssr, 'sexdf', 'absDiff')#
do.wilcox('SDR_acu', 'auto_acu', ssr, 'sexdf', 'absDiff')#
#
brainp = do.wilcox('SDR_brain-dna', 'auto_brain-dna', ssr, 'sexdf', 'absDiff')$p.value#
pelvicp = do.wilcox('SDR_pelvic-dna', 'auto_pelvic-dna', ssr, 'sexdf', 'absDiff')$p.value#
acup = do.wilcox('SDR_acu', 'auto_acu', ssr, 'sexdf', 'absDiff')$p.value#
#
pvals = c(brainp, pelvicp, acup)#
#build the same with violin#
absViolin = ggplot(data=ssr) +#
	geom_violin(aes(x=sexdf, y=absDiff, fill=sex, col=sex), na.rm=T) +#
	geom_segment(data=meddf, aes(x=x1, y=y, xend=x2, yend=y), lwd=1.5) +#
	lims(y=c(-.1, 2)) + #
	labs(x='', y='abs(M:F)') + #
	theme(axis.text.x = element_blank(), axis.ticks.x = element_line(size=0))#
plot(absViolin)#
#
#---------- ALLELE-SPECIFIC EXPRESSION DATA ----------##
#
#load xy expression white#
ll=load("~/gitreps/stickle_back_sex_chromosomes/allele_specific_expression/xy_white.Rdata")#
#m.w = merged dataset with sex differences and XY within male differences for white dataset#
ll#
#scatterplot for Y:X vs Male:Female#
xyscatter.w = ggplot(data=m.w) +  #
	geom_smooth(data= m.w, aes(log2FoldChange.x,log2FoldChange.y), method='lm', formula=y~x, se=T) +#
	geom_point(aes(x=log2FoldChange.x, y= log2FoldChange.y), alpha=1) +#
	lims(y=c(-2, 1.5)) +#
	labs(x=bquote(log[2]~"Y:X in males"), y=bquote(log[2]~"M:F") )#
plot(xyscatter.w)#
lmw=lm(m.w$log2FoldChange.y~m.w$log2FoldChange.x)#
summary(lmw)
plot(xyscatter.w)
#scatterplot for Y:X vs Male:Female#
xyscatter.w = ggplot(data=m.w) +  #
	geom_smooth(data= m.w, aes(log2FoldChange.x,log2FoldChange.y), method='lm', formula=y~x, se=T) +#
	geom_point(aes(x=log2FoldChange.x, y= log2FoldChange.y), alpha=1) +#
	lims(y=c(-2, 1.5)) +#
	labs(x=bquote(log[2]~"Y:X in males"), y=bquote(log[2]~"M:F") )
ll
ll=load("~/gitreps/stickle_back_sex_chromosomes/allele_specific_expression/xy_white.Rdata")
ll=load("~/gitreps/stickle_back_sex_chromosomes/gene_expression/xy_white.Rdata")
ll=load("~/gitreps/stickle_back_sex_chromosomes/gene_expression/allele_specific_expression/xy_white.Rdata")
ll=load("~/gitreps/pungitius_sex_chromosome/gene_expression/allele_specific_expression/xy_white.Rdata")
ll
#scatterplot for Y:X vs Male:Female#
xyscatter.w = ggplot(data=m.w) +  #
	geom_smooth(data= m.w, aes(log2FoldChange.x,log2FoldChange.y), method='lm', formula=y~x, se=T) +#
	geom_point(aes(x=log2FoldChange.x, y= log2FoldChange.y), alpha=1) +#
	lims(y=c(-2, 1.5)) +#
	labs(x=bquote(log[2]~"Y:X in males"), y=bquote(log[2]~"M:F") )#
plot(xyscatter.w)#
lmw=lm(m.w$log2FoldChange.y~m.w$log2FoldChange.x)#
summary(lmw)
#repeat but with the DNA controlled values#
dcont = ssr[ssr$dset=='brain-dna',]#
xy = m.w[,c('Row.names', 'log2FoldChange.x')]#
colnames(xy) = c('geneId', 'fcYX')#
head(xy)#
m=merge(dcont, xy, by = 'geneId')#
head(m)#
lmx = lm(m$fc~m$fcYX)#
plot(m$fc~m$fcYX)
summary(lmx)
#keep the dna controlled one#
xyscatter.w2 = ggplot(m) +  #
	geom_smooth(aes(x=fcYX, y=fc), method='lm', formula=y~x, se=T) +#
	geom_point(aes(x=fcYX, y= fc), alpha=1) +#
	lims(y=c(-2, 1.5)) +#
	labs(x=bquote(log[2]~"Y:X in males"), y=bquote(log[2]~"M:F") )#
plot(xyscatter.w2)#
lmw=lm(m$fc~m$fcYX)#
summary(lmw)
#load xy expression von Hippel#
ll=load("~/gitreps/stickle_back_sex_chromosomes/allele_specific_expression/xy_vonHippel.Rdata")#
#m.vh = merged dataset with sex differences and XY within male differences for von Hippel dataset#
ll#
#
xyscatter.vh = ggplot(data=m.vh) +  #
	geom_smooth(data= m.vh, aes(log2FoldChange.x,log2FoldChange.y), method='lm', formula=y~x, se=T) +#
	geom_point(aes(x=log2FoldChange.x, y= log2FoldChange.y), alpha=1) +#
	lims(y=c(-2, 1.5)) +#
	labs(x=bquote(log[2]~"Y:X in males"), y=bquote(log[2]~"M:F") )#
plot(xyscatter.vh)#
head(m.vh)#
lmvh=lm(m.vh$log2FoldChange.y~m.vh$log2FoldChange.x)#
summary(lmvh)
