library(ggplot2)#
library(cowplot)#
setwd("~/gitreps/pungitius_sex_chromosome/figure_plotting")#
#
#set up global plotting variables#
male.col = 'dodgerblue'#
female.col = 'firebrick'#
sin.col = 'forestgreen'#
tym.col = 'mediumseagreen'#
xlabAngle=20#
#
#load depth comparisons#
ll=load('depthPlots.Rdata')#
ll#
dp1 = dp1 + labs(x="Position (Mb)", y='M:F coverage', subtitle='G. aculeatus') + theme(plot.subtitle=element_text(face="italic")) #
dp2 = dp2 + labs(x="Position (Mb)", y='M:F coverage', subtitle='P. pungitius') + theme(plot.subtitle=element_text(face="italic")) #
plot_grid(dp1, dp2, ncol=2)#
#
#-------- REPETITIVE ELEMENT ENRICHMENT --------
#LOAD DATA#
ll=load("repetitiveElements.Rdata")#
#rep.res = the DESeq2 results for repetitive elements#
#s = the set of repetitive elements with sinificantly different fold coverage between males and females#
#mt = the estimated proportion of reads mapped to repetitive elements#
ll#
#
#BUILD FIGURES#
#
#density plot#
den=density(s$log2FoldChange)#
den.df = data.frame(x=den$x, y=den$y)#
male.df = den.df[den.df$x >=max(den.df$x[den.df$x<0]),]#
female.df = den.df[den.df$x <= 0,]#
denRep=ggplot(data=female.df, aes(x=x, y=y)) + #
	geom_vline(aes(xintercept=0), linetype='dashed') +#
	geom_line(col=female.col) + #
	geom_area(fill=female.col) +#
	geom_line(data=male.df, aes(x=x,y=y), col=male.col) + #
	geom_area(data=male.df, aes(x=x,y=y), fill=male.col) +#
	lims(x=c(-3.3, 3.3)) +#
	# scale_x_continuous(limits = c(-0.03, 0.22)) +#
	# geom_segment(data=d12, aes(x=d, y=y1, xend=d, yend=y2), lineend='round', lwd=1.2) +#
	labs(x="", y="")#
plot(denRep)#
#stats#
rep.res$sig = rep.res$padj < 0.1#
m = rep.res[rep.res$log2FoldChange>0,]#
osig = sum(m$sig, na.rm=T)#
esig = round(sum(rep.res$sig, na.rm=T)/2, digits=0)#
ons = sum(!m$sig, na.rm=T)#
ens = round(sum(!rep.res$sig, na.rm=T)/2, digits=0)#
sig = c(osig, esig)#
notsig = c(ons, ens)#
stbl = rbind(sig, notsig)#
colnames(stbl) = c('observed', 'expected')#
fisher.test(stbl, alternative='greater')#
#
#BOXPLOT#
mt$pct = mt$x / 1e6 * 100#
repBox=ggplot(data=mt) + #
	geom_boxplot(aes(x=sex, y=pct), col=c(female.col, male.col), lwd=1) +#
	labs(y="% reads", x="Sex") +#
	labs(subtitle='Repetitive elements') #
	# lims(y=c(6.1, 6.65))#
plot(repBox)
#stats#
tapply(mt$x, INDEX=mt$sex, mean)#
male = mt$x[mt$sex=="M"]#
female = mt$x[mt$sex=="F"]#
t.test(x=male, y=female, alternative='greater')#
# PLOT VOLCANO PLOT#
res.df = data.frame(rep.res)#
res.df$logp = -log(res.df$pvalue, 10)#
s.res.df = res.df[res.df$padj < 0.1,]#
male = rep('male (10)', nrow(s.res.df))#
male[s.res.df$log2FoldChange < 0]<-'female (3)'#
s.res.df$significant = male#
volcano = ggplot(data=res.df, aes(x=log2FoldChange, y=logp)) + #
	geom_point(col='black', alpha=0.3) +#
	geom_point(data=s.res.df, aes(x=log2FoldChange, y=logp, col=significant), size=2.5) +#
	scale_colour_manual(values=c('firebrick','dodgerblue')) +#
	xlab(bquote(log[2]*"(M:F)")) +#
	ylab(bquote(-log[10]*"(p)" )) +#
	# lims(x=c(-3.2, 3.2), y=c(0, 20)) +#
	labs(subtitle='Repetitive elements') +#
	theme(legend.position="none")#
plot(volcano)
volcanoLenged = ggplot(data=res.df, aes(x=log2FoldChange, y=logp)) + #
	geom_point(col='black', alpha=0.3) +#
	geom_point(data=s.res.df, aes(x=log2FoldChange, y=logp, col=significant), size=2.5) +#
	scale_colour_manual(values=c('firebrick','dodgerblue')) +#
	xlab(bquote(log[2]*"(M:F)")) +#
	ylab(bquote(-log[10]*"(p)" )) +#
	labs(subtitle='Repetitive\nelements') +#
	lims(x=c(-3.2, 3.2), y=c(0,17)) #
plot(volcanoLenged)
plot_grid(denRep, repBox, ncol=2)#
plot_grid(volcano, repBox, ncol=2)
#LOAD#
ll=load('pairwisedNdS.Rdata')#
#ad = 'all data' these are the dNdS values for all variants#
#pd = 'private data' these are the dNdS values based only on private variants#
#sind = 'sin dnds' these are the pairwise comparisons with sinensis for all varants#
pd$species=sub('private', '', pd$species)#
ll#
#
do.wilcox = function(sp1, sp2, df, stat){#
	stat1 = df[df$species == sp1, stat]#
	stat2 = df[df$species == sp2, stat]#
	sub = df[df$species %in% c(sp1, sp2),]#
	w=wilcox.test(x=stat1, y=stat2)#
	boxplot(sub[,stat]~sub[,'species'], outline=F, main=paste("p =",w$p.value))#
	return(w)#
}
#ALL VARINATS VIOLIN PLOT#
#set up data to plot species in order#
spp=ad$species#
spp[spp=="Y"]<-"punY"#
spp[spp=="X"]<-"punX"#
ad$species=spp#
ad$species = factor(ad$species, levels=c("tym", "sin", "punY", "punX"), ordered=T)#
levels(ad$species)
#set up data for line segments at medians#
meds = data.frame(tapply(ad$dNdS, INDEX=ad$species, function(x) median(x, na.rm=T)))#
colnames(meds) = c('y')#
meds$x1 = 1:4 - 0.2#
meds$x2 = 1:4 + 0.2#
all.dnds.violin = ggplot(data=ad) + #
	geom_violin(aes(x=species, y=dNdS, fill=species, col=species), na.rm=T) +#
	# geom_point(data=pmeds, aes(x=x, y=y), pch="-", size=10) +#
	geom_segment(data=meds, aes(x=x1, y=y, xend=x2, yend=y), lwd=1.5) +#
	scale_color_manual(values=c(sin.col, tym.col, female.col, male.col)) +#
	scale_fill_manual(values=c(sin.col, tym.col, female.col, male.col)) +#
	# scale_x_discrete(breaks=1:4, labels=names(num)) +#
	lims(y=c(-.1, 0.5)) +#
	labs(y='dN/dS', x='', subtitle='All variants') +#
	theme(legend.position="none",axis.text.x = element_text(angle= xlabAngle))#
print(all.dnds.violin)
#standard boxplot to doublecheck the figure#
quartz()#
boxplot(ad$dNdS~ad$species, outline=F)#
#make a similar figure for pairwise dS against 3-spine#
meds = data.frame(tapply(ad$dS, INDEX=ad$species, function(x) median(x, na.rm=T)))#
colnames(meds) = c('y')#
meds$x1 = 1:4 - 0.2#
meds$x2 = 1:4 + 0.2#
all.dS.violin = ggplot(data=ad) + #
	geom_violin(aes(x=species, y=dS, fill=species, col=species), na.rm=T) +#
	# geom_point(data=pmeds, aes(x=x, y=y), pch="-", size=10) +#
	geom_segment(data=meds, aes(x=x1, y=y, xend=x2, yend=y), lwd=1.5) +#
	scale_color_manual(values=c(sin.col, tym.col, female.col, male.col)) +#
	scale_fill_manual(values=c(sin.col, tym.col, female.col, male.col)) +#
	lims(y=c(-.1, 0.5)) +#
	labs(y='pairwise dS vs G. aculeatus', x='', subtitle='All variants') +#
	theme(legend.position="none",axis.text.x = element_text(angle= xlabAngle))#
print(all.dS.violin)
#standard boxplot to doublecheck the figure#
quartz()#
boxplot(ad$dS~ad$species, outline=F)
#PRIVATE VARIANTS VIOLIN PLOT#
#
#set up data to plot species in order#
spp=pd$species#
spp[spp=="Y"]<-"punY"#
spp[spp=="X"]<-"punX"#
pd$species=spp#
pd$species = factor(pd$species, levels=c("tym", "sin", "punY", "punX"), ordered=T)#
levels(pd$species)
#set up medians#
pmeds = data.frame(tapply(pd$dNdS, INDEX=pd$species, function(x) median(x, na.rm=T)))#
colnames(pmeds) = c('y')#
pmeds$spp = rownames(pmeds)#
pmeds$x1 = 1:4 - 0.2#
pmeds$x2 = 1:4 + 0.2#
pmeds
private.dnds.violin = ggplot(data=pd) + #
	geom_violin(aes(x=species, y=dNdS, fill=species, col=species), na.rm=T) +#
	geom_segment(data=pmeds, aes(x=x1, y=y, xend=x2, yend=y), lwd=1) +#
	scale_color_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	# scale_x_discrete(breaks=1:4, labels=names(num)) +#
	lims(y=c(-.1, 0.5)) +#
	labs(y='dN/dS', x='', subtitle ='Private variants') +#
	theme(legend.position="none",axis.text.x = element_text(angle= xlabAngle))#
print(private.dnds.violin)
#boxplot to doublecheck#
quartz()#
boxplot(pd$dNdS~pd$species, outline=F, ylim=c(-.1, 0.5))
#stats#
do.wilcox('X', 'tym', pd, 'dNdS')#
do.wilcox('X', 'sin', pd, 'dNdS')#
do.wilcox('Y', 'sin', pd, 'dNdS')#
do.wilcox('X', 'Y', pd, 'dNdS')#
#REPEAT THE PRIVATE VIOLIN PLOT FOR dS against 3-spine#
#
#set up medians#
pmeds = data.frame(tapply(pd$dS, INDEX=pd$species, function(x) median(x, na.rm=T)))#
colnames(pmeds) = c('y')#
pmeds$spp = rownames(pmeds)#
pmeds$x1 = 1:4 - 0.2#
pmeds$x2 = 1:4 + 0.2#
pmeds#
#
private.dS.violin = ggplot(data=pd) + #
	geom_violin(aes(x=species, y=dS, fill=species, col=species), na.rm=T) +#
	geom_segment(data=pmeds, aes(x=x1, y=y, xend=x2, yend=y), lwd=1) +#
	scale_color_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	# scale_x_discrete(breaks=1:4, labels=names(num)) +#
	lims(y=c(-.01, 0.1)) +#
	labs(y='pairwise dS vs G. aculeatus', x='', subtitle ='Private variants') +#
	theme(legend.position="none",axis.text.x = element_text(angle= xlabAngle))#
print(private.dS.violin)
#boxplot to doublecheck#
quartz()#
boxplot(pd$dNdS~pd$species, outline=F, ylim=c(-.1, 0.5))
#-------- PROVEAN RESULTS --------##
ll=load("provean.Rdata")#
#d = the provean scores#
#psub = the provean scores for mutations private to each species/chromosomes#
#ratios = the ratio of bad to ok mutations (bad <= -2.5 score)#
#private.ratios = same but for private mutations#
#tbl = the table of bad and ok mutations to use for chi square test#
#private.tbl = same but for private mutations#
colnames(d)[7]='species'#
colnames(psub)[7]='species'#
d$score = d$score*-1#
psub$score = psub$score*-1#
head(d)#
head(psub)
#set up ordered species names#
num#
d$sppNum = d$species#
d$sppNum[d$sppNum =='tym']<-1#
d$sppNum[d$sppNum =='sin']<-2#
d$sppNum[d$sppNum =='y']<-3#
d$sppNum[d$sppNum =='x']<-4#
#
#set up medians#
dmeds = data.frame(tapply(d$score, INDEX=d$sppNum, function(x) median(x, na.rm=T)))#
colnames(dmeds) = c('y')#
dmeds$sppNum = rownames(dmeds)#
dmeds$spp = spp#
dmeds$x1 = 1:4 - 0.2#
dmeds$x2 = 1:4 + 0.2#
dmeds
#private.tbl = same but for private mutations#
colnames(d)[7]='species'#
colnames(psub)[7]='species'#
d$score = d$score*-1#
psub$score = psub$score*-1#
head(d)#
head(psub)#
#
#ALL VARIANTS#
#set up ordered species names#
num#
d$sppNum = d$species#
d$sppNum[d$sppNum =='tym']<-1#
d$sppNum[d$sppNum =='sin']<-2#
d$sppNum[d$sppNum =='y']<-3#
d$sppNum[d$sppNum =='x']<-4#
#
#set up medians#
dmeds = data.frame(tapply(d$score, INDEX=d$sppNum, function(x) median(x, na.rm=T)))#
colnames(dmeds) = c('y')#
dmeds$sppNum = rownames(dmeds)#
dmeds$spp = spp#
dmeds$x1 = 1:4 - 0.2#
dmeds$x2 = 1:4 + 0.2#
dmeds
#plot violin plot#
all.provean.violin = ggplot(data=d) +#
	geom_violin(aes(x=sppNum, y=score, col=sppNum, fill=sppNum), na.rm=T) +#
	geom_segment(data=dmeds, aes(x=x1, y=y, xend=x2, yend=y), lwd=1) +#
	scale_color_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	scale_x_discrete(breaks=1:4, labels=names(num)) +#
	labs(y='deleteriousness', x='', subtitle='All variants') + #
	theme(legend.position='none',axis.text.x = element_text(angle= xlabAngle))#
plot(all.provean.violin)#
#set up frequencies of bad (< -2.5) and ok (> -2.5)#
#PRIVATE VARIANTS#
#set up ordered species names#
num#
psub$sppNum = psub $species#
psub$sppNum[psub$sppNum =='tym']<-1#
psub$sppNum[psub$sppNum =='sin']<-2#
psub$sppNum[psub$sppNum =='y']<-3#
psub$sppNum[psub$sppNum =='x']<-4#
#
#set up medians#
psmeds = data.frame(tapply(psub$score, INDEX=psub$sppNum, function(x) median(x, na.rm=T)))#
colnames(psmeds) = c('y')#
psmeds$sppNum = rownames(psmeds)#
psmeds$spp = spp#
psmeds$x1 = 1:4 - 0.2#
psmeds$x2 = 1:4 + 0.2#
psmeds#
#
#plot violin plot#
private.provean.violin = ggplot(data=psub) +#
	geom_violin(aes(x=sppNum, y=score, col=sppNum, fill=sppNum), na.rm=T) +#
	geom_segment(data=psmeds, aes(x=x1, y=y, xend=x2, yend=y), lwd=1) +#
	scale_color_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	scale_x_discrete(breaks=1:4, labels=names(num)) +#
	labs(y='deleteriousness', x='', subtitle="Private variants") + #
	theme(legend.position='none',#
		axis.text.x = element_text(angle= xlabAngle))#
plot(private.provean.violin)#
#standard boxplot to doublecheck#
boxplot(d$score~d$species, outline=F)#
#DO STATS#
#
siny = psub[psub$sample %in% c('tym', 'y'),]#
siny$sample=as.factor(siny$sample)#
t.test(siny$score~ siny$sample)#
#
head(psub)#
do.wilcox('y', 'sin', psub, 'score')#
do.wilcox('y', 'tym', psub, 'score')#
do.wilcox('y', 'x', psub, 'score')#
do.wilcox('x', 'sin', psub, 'score')#
do.wilcox('x', 'tym', psub, 'score')#
#
#fisher's exact#
head(psub)#
#
ysubs = psub[psub$species=='y',]#
sinsubs = psub[psub$species=='sin',]#
bady = sum(ysubs$bad, na.rm=T)#
badsin = sum(ysubs$bad, na.rm=T)#
oky = sum(ysubs$ok, na.rm=T)#
oksin = sum(sinsubs$ok, na.rm=T)#
tab=rbind(c(bady, badsin), c(oky, oksin))#
colnames(tab) = c('y', 'sin')#
rownames(tab) = c('bad', 'ok')#
fisher.test(tab)#
#
by=ysubs[ysubs$bad==1,]#
bs=sinsubs[sinsubs$bad==1,]#
sum(bs$mut %in% by$mut)#
bs[bs$mut %in% by$mut,]
#---- PLOT ALL TOGETHER ----##
#DEPTH#
plot(dp1)#
plot(dp2)#
#
#REPETITIVE ELEMENTS#
# plot(volcanoLenged)#
plot(volcano)#
plot(repBox)#
#dNdS #
#all#
plot(all.dnds.violin)#
plot(private.dnds.violin)#
#PROVEAN#
plot(all.provean.violin)#
plot(private.provean.violin)#
LETTERS[1:8]#
#build final plot#
plot_grid(dp1, dp2, all.dnds.violin, private.dnds.violin, volcano, repBox, all.provean.violin, private.provean.violin, ncol=4, labels=c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'), label_size=18)
plot_grid(dp1, dp2, all.dnds.violin, private.dnds.violin, volcano, repBox, all.provean.violin, private.provean.violin, ncol=4, labels=c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'), label_size=18)
#plot violin plot#
all.provean.violin = ggplot(data=d) +#
	geom_violin(aes(x=sppNum, y=score, col=sppNum, fill=sppNum), na.rm=T) +#
	geom_segment(data=dmeds, aes(x=x1, y=y, xend=x2, yend=y), lwd=1) +#
	scale_color_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	scale_x_discrete(breaks=1:4, labels=names(num)) +#
	labs(y='deleteriousness', x='', subtitle='All variants') + #
	theme(legend.position='none',axis.text.x = element_text(angle= xlabAngle))#
plot(all.provean.violin)
num
head(d)
ll=load("provean.Rdata")
ll
rm(list=ls())
#plot_figure6_degeneration.R#
#
library(ggplot2)#
library(cowplot)#
setwd("~/gitreps/pungitius_sex_chromosome/figure_plotting")#
#
#set up global plotting variables#
male.col = 'dodgerblue'#
female.col = 'firebrick'#
sin.col = 'forestgreen'#
tym.col = 'mediumseagreen'#
xlabAngle=20#
#
#load depth comparisons#
ll=load('depthPlots.Rdata')#
ll#
dp1 = dp1 + labs(x="Position (Mb)", y='M:F coverage', subtitle='G. aculeatus') + theme(plot.subtitle=element_text(face="italic")) #
dp2 = dp2 + labs(x="Position (Mb)", y='M:F coverage', subtitle='P. pungitius') + theme(plot.subtitle=element_text(face="italic")) #
plot_grid(dp1, dp2, ncol=2)#
#
#-------- REPETITIVE ELEMENT ENRICHMENT --------##
#LOAD DATA#
ll=load("repetitiveElements.Rdata")#
#rep.res = the DESeq2 results for repetitive elements#
#s = the set of repetitive elements with sinificantly different fold coverage between males and females#
#mt = the estimated proportion of reads mapped to repetitive elements#
ll#
#
#BUILD FIGURES#
#
#density plot#
den=density(s$log2FoldChange)#
den.df = data.frame(x=den$x, y=den$y)#
male.df = den.df[den.df$x >=max(den.df$x[den.df$x<0]),]#
female.df = den.df[den.df$x <= 0,]#
denRep=ggplot(data=female.df, aes(x=x, y=y)) + #
	geom_vline(aes(xintercept=0), linetype='dashed') +#
	geom_line(col=female.col) + #
	geom_area(fill=female.col) +#
	geom_line(data=male.df, aes(x=x,y=y), col=male.col) + #
	geom_area(data=male.df, aes(x=x,y=y), fill=male.col) +#
	lims(x=c(-3.3, 3.3)) +#
	# scale_x_continuous(limits = c(-0.03, 0.22)) +#
	# geom_segment(data=d12, aes(x=d, y=y1, xend=d, yend=y2), lineend='round', lwd=1.2) +#
	labs(x="", y="")#
plot(denRep)#
#stats#
rep.res$sig = rep.res$padj < 0.1#
m = rep.res[rep.res$log2FoldChange>0,]#
osig = sum(m$sig, na.rm=T)#
esig = round(sum(rep.res$sig, na.rm=T)/2, digits=0)#
ons = sum(!m$sig, na.rm=T)#
ens = round(sum(!rep.res$sig, na.rm=T)/2, digits=0)#
sig = c(osig, esig)#
notsig = c(ons, ens)#
stbl = rbind(sig, notsig)#
colnames(stbl) = c('observed', 'expected')#
fisher.test(stbl, alternative='greater')#
#
#BOXPLOT#
mt$pct = mt$x / 1e6 * 100#
repBox=ggplot(data=mt) + #
	geom_boxplot(aes(x=sex, y=pct), col=c(female.col, male.col), lwd=1) +#
	labs(y="% reads", x="Sex") +#
	labs(subtitle='Repetitive elements') #
	# lims(y=c(6.1, 6.65))#
plot(repBox)#
#
#stats#
tapply(mt$x, INDEX=mt$sex, mean)#
male = mt$x[mt$sex=="M"]#
female = mt$x[mt$sex=="F"]#
t.test(x=male, y=female, alternative='greater')#
# PLOT VOLCANO PLOT#
res.df = data.frame(rep.res)#
res.df$logp = -log(res.df$pvalue, 10)#
s.res.df = res.df[res.df$padj < 0.1,]#
male = rep('male (10)', nrow(s.res.df))#
male[s.res.df$log2FoldChange < 0]<-'female (3)'#
s.res.df$significant = male#
volcano = ggplot(data=res.df, aes(x=log2FoldChange, y=logp)) + #
	geom_point(col='black', alpha=0.3) +#
	geom_point(data=s.res.df, aes(x=log2FoldChange, y=logp, col=significant), size=2.5) +#
	scale_colour_manual(values=c('firebrick','dodgerblue')) +#
	xlab(bquote(log[2]*"(M:F)")) +#
	ylab(bquote(-log[10]*"(p)" )) +#
	# lims(x=c(-3.2, 3.2), y=c(0, 20)) +#
	labs(subtitle='Repetitive elements') +#
	theme(legend.position="none")#
plot(volcano)#
#
volcanoLenged = ggplot(data=res.df, aes(x=log2FoldChange, y=logp)) + #
	geom_point(col='black', alpha=0.3) +#
	geom_point(data=s.res.df, aes(x=log2FoldChange, y=logp, col=significant), size=2.5) +#
	scale_colour_manual(values=c('firebrick','dodgerblue')) +#
	xlab(bquote(log[2]*"(M:F)")) +#
	ylab(bquote(-log[10]*"(p)" )) +#
	labs(subtitle='Repetitive\nelements') +#
	lims(x=c(-3.2, 3.2), y=c(0,17)) #
plot(volcanoLenged)#
#
plot_grid(denRep, repBox, ncol=2)#
plot_grid(volcano, repBox, ncol=2)#
#
#====================================================##
#
#------------------ PAIRWISE dN/dS against 3-spine ------------------##
#The ggplot boxplots are strange, so went with violin plots, with the median values drawn manually#
#
#LOAD#
ll=load('pairwisedNdS.Rdata')#
#ad = 'all data' these are the dNdS values for all variants#
#pd = 'private data' these are the dNdS values based only on private variants#
#sind = 'sin dnds' these are the pairwise comparisons with sinensis for all varants#
pd$species=sub('private', '', pd$species)#
ll#
#
do.wilcox = function(sp1, sp2, df, stat){#
	stat1 = df[df$species == sp1, stat]#
	stat2 = df[df$species == sp2, stat]#
	sub = df[df$species %in% c(sp1, sp2),]#
	w=wilcox.test(x=stat1, y=stat2)#
	boxplot(sub[,stat]~sub[,'species'], outline=F, main=paste("p =",w$p.value))#
	return(w)#
}#
#ALL VARINATS VIOLIN PLOT#
#set up data to plot species in order#
spp=ad$species#
spp[spp=="Y"]<-"punY"#
spp[spp=="X"]<-"punX"#
ad$species=spp#
ad$species = factor(ad$species, levels=c("tym", "sin", "punY", "punX"), ordered=T)#
levels(ad$species)#
#
#set up data for line segments at medians#
meds = data.frame(tapply(ad$dNdS, INDEX=ad$species, function(x) median(x, na.rm=T)))#
colnames(meds) = c('y')#
meds$x1 = 1:4 - 0.2#
meds$x2 = 1:4 + 0.2#
all.dnds.violin = ggplot(data=ad) + #
	geom_violin(aes(x=species, y=dNdS, fill=species, col=species), na.rm=T) +#
	# geom_point(data=pmeds, aes(x=x, y=y), pch="-", size=10) +#
	geom_segment(data=meds, aes(x=x1, y=y, xend=x2, yend=y), lwd=1.5) +#
	scale_color_manual(values=c(sin.col, tym.col, female.col, male.col)) +#
	scale_fill_manual(values=c(sin.col, tym.col, female.col, male.col)) +#
	# scale_x_discrete(breaks=1:4, labels=names(num)) +#
	lims(y=c(-.1, 0.5)) +#
	labs(y='dN/dS', x='', subtitle='All variants') +#
	theme(legend.position="none",axis.text.x = element_text(angle= xlabAngle))#
print(all.dnds.violin)#
#
#standard boxplot to doublecheck the figure#
quartz()#
boxplot(ad$dNdS~ad$species, outline=F)#
#make a similar figure for pairwise dS against 3-spine#
meds = data.frame(tapply(ad$dS, INDEX=ad$species, function(x) median(x, na.rm=T)))#
colnames(meds) = c('y')#
meds$x1 = 1:4 - 0.2#
meds$x2 = 1:4 + 0.2#
all.dS.violin = ggplot(data=ad) + #
	geom_violin(aes(x=species, y=dS, fill=species, col=species), na.rm=T) +#
	# geom_point(data=pmeds, aes(x=x, y=y), pch="-", size=10) +#
	geom_segment(data=meds, aes(x=x1, y=y, xend=x2, yend=y), lwd=1.5) +#
	scale_color_manual(values=c(sin.col, tym.col, female.col, male.col)) +#
	scale_fill_manual(values=c(sin.col, tym.col, female.col, male.col)) +#
	lims(y=c(-.1, 0.5)) +#
	labs(y='pairwise dS vs G. aculeatus', x='', subtitle='All variants') +#
	theme(legend.position="none",axis.text.x = element_text(angle= xlabAngle))#
print(all.dS.violin)#
#
#standard boxplot to doublecheck the figure#
quartz()#
boxplot(ad$dS~ad$species, outline=F)#
#
#PRIVATE VARIANTS VIOLIN PLOT#
#
#set up data to plot species in order#
spp=pd$species#
spp[spp=="Y"]<-"punY"#
spp[spp=="X"]<-"punX"#
pd$species=spp#
pd$species = factor(pd$species, levels=c("tym", "sin", "punY", "punX"), ordered=T)#
levels(pd$species)#
#
#set up medians#
pmeds = data.frame(tapply(pd$dNdS, INDEX=pd$species, function(x) median(x, na.rm=T)))#
colnames(pmeds) = c('y')#
pmeds$spp = rownames(pmeds)#
pmeds$x1 = 1:4 - 0.2#
pmeds$x2 = 1:4 + 0.2#
pmeds#
#
private.dnds.violin = ggplot(data=pd) + #
	geom_violin(aes(x=species, y=dNdS, fill=species, col=species), na.rm=T) +#
	geom_segment(data=pmeds, aes(x=x1, y=y, xend=x2, yend=y), lwd=1) +#
	scale_color_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	# scale_x_discrete(breaks=1:4, labels=names(num)) +#
	lims(y=c(-.1, 0.5)) +#
	labs(y='dN/dS', x='', subtitle ='Private variants') +#
	theme(legend.position="none",axis.text.x = element_text(angle= xlabAngle))#
print(private.dnds.violin)#
#
#boxplot to doublecheck#
quartz()#
boxplot(pd$dNdS~pd$species, outline=F, ylim=c(-.1, 0.5))#
#
#stats#
do.wilcox('X', 'tym', pd, 'dNdS')#
do.wilcox('X', 'sin', pd, 'dNdS')#
do.wilcox('Y', 'sin', pd, 'dNdS')#
do.wilcox('X', 'Y', pd, 'dNdS')#
#REPEAT THE PRIVATE VIOLIN PLOT FOR dS against 3-spine#
#
#set up medians#
pmeds = data.frame(tapply(pd$dS, INDEX=pd$species, function(x) median(x, na.rm=T)))#
colnames(pmeds) = c('y')#
pmeds$spp = rownames(pmeds)#
pmeds$x1 = 1:4 - 0.2#
pmeds$x2 = 1:4 + 0.2#
pmeds#
#
private.dS.violin = ggplot(data=pd) + #
	geom_violin(aes(x=species, y=dS, fill=species, col=species), na.rm=T) +#
	geom_segment(data=pmeds, aes(x=x1, y=y, xend=x2, yend=y), lwd=1) +#
	scale_color_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	# scale_x_discrete(breaks=1:4, labels=names(num)) +#
	lims(y=c(-.01, 0.1)) +#
	labs(y='pairwise dS vs G. aculeatus', x='', subtitle ='Private variants') +#
	theme(legend.position="none",axis.text.x = element_text(angle= xlabAngle))#
print(private.dS.violin)#
#
#boxplot to doublecheck#
quartz()#
boxplot(pd$dNdS~pd$species, outline=F, ylim=c(-.1, 0.5))#
#-------- PROVEAN RESULTS --------
ll=load("provean.Rdata")
ll
head(d)
head(psub)
#private.tbl = same but for private mutations#
colnames(d)[7]='species'#
colnames(psub)[7]='species'#
d$score = d$score*-1#
psub$score = psub$score*-1#
head(d)#
head(psub)
class(d$species)
rm(list=ls())
#save formatted data for final plotting#
#
library(plotrix)#
setwd("~/gitreps/pungitius_sex_chromosome/degeneration/provean")#
#read in the data#
readin = function(fileName, sampleName){#
	d=read.table(fileName, header = T)#
	d$sample = sampleName#
	return(d)#
}
x=readin('x_provean_res.tsv', 'x')#
y= readin('y_provean_res.tsv', 'y')#
s= readin('sin_provean_res.tsv', 'sin')#
t= readin('tym_provean_res.tsv', 'tym')#
d=rbind(x,y,s,t)#
#plot overall scores#
boxplot(d$score~d$sample, outline=F)#
mns = tapply(d$score, INDEX=d$sample, function(x) mean(x, na.rm=T))#
ses = tapply(d$score, INDEX=d$sample, function(x) std.error(x, na.rm=T))#
plotCI(x=1:length(mns), y=mns, uiw=ses)
#frequency of bad mutations#
CUT=-2.5#
d$bad = as.numeric(d$score <= CUT)#
d$ok = as.numeric(d$score > CUT)#
sums = tapply(d$bad, INDEX=d$sample, function(x) sum(x, na.rm=T))#
oksums = tapply(d$ok, INDEX=d$sample, function(x) sum(x, na.rm=T))#
ratios = sums / (sums + oksums)#
tbl = rbind(sums, oksums)#
barplot(ratios)#
chisq.test(tbl)
#since Y is likely to have stray X variants#
p = d#
p$mut = paste(p$gene, p$var, sep="_")#
counts = table(p$mut)#
plot(density(counts)) #most of them are shared#
private = counts[counts==1]#
pmuts= names(private)
#to get private alleles for X, remove the Y mutations and repeat#
no.y = p[p$sample !='y',]#
counts.noy = table(no.y$mut)#
private.x = counts.noy[counts.noy==1]#
pmuts.x = names(private.x)#
psub.nonx = p[p$mut %in% pmuts & p$sample != 'x',]#
px = p[p$mut %in% pmuts.x & p$sample == 'x',]#
#
#now combine the two together#
psub = rbind(psub.nonx, px)
#plot overall scores#
boxplot(psub$score~psub$sample, outline=F)#
mns = tapply(psub$score, INDEX=psub$sample, function(x) mean(x, na.rm=T))#
ses = tapply(psub$score, INDEX=psub$sample, function(x) std.error(x, na.rm=T))#
plotCI(x=1:length(mns), y=mns, uiw=ses, axes=F, xlim=c(0.5,4.5))#
axis(1, at = c(1:4), labels=names(mns))#
axis(2)
#frequency of bad mutations#
CUT=-2.5#
psub$bad = as.numeric(psub$score <= CUT)#
psub$ok = as.numeric(psub$score > CUT)#
sums = tapply(psub$bad, INDEX=psub$sample, function(x) sum(x, na.rm=T))#
oksums = tapply(psub$ok, INDEX=psub$sample, function(x) sum(x, na.rm=T))#
private.ratios = sums / (sums + oksums)#
private.tbl = rbind(sums, oksums)#
barplot(sums)#
barplot(private.ratios)#
chisq.test(private.tbl)#
chisq.test(private.tbl[,c('x','y')])
private.tbl
chisq.test(private.tbl[,c('sin','y')])
private.tbl[,c('sin','y')]
barplot(private.ratios)
num
num
spp=d$species
unique(spp)
head(d)
ll=load("provean.Rdata")#
#d = the provean scores#
#psub = the provean scores for mutations private to each species/chromosomes#
#ratios = the ratio of bad to ok mutations (bad <= -2.5 score)#
#private.ratios = same but for private mutations#
#tbl = the table of bad and ok mutations to use for chi square test#
#private.tbl = same but for private mutations#
colnames(d)[7]='species'#
colnames(psub)[7]='species'#
d$score = d$score*-1#
psub$score = psub$score*-1#
head(d)#
head(psub)
spp=d$species
unique(spp)
spp=d$species#
spp[spp=="y"]<-"punY"#
spp[spp=="x"]<-"punX"#
d$species = factor(spp, levels=c("tym", "sin", "punY", "punX"), ordered=T)#
levels(d$species)
levels(d$species)
dmeds = data.frame(tapply(d$score, INDEX=d$sppNum, function(x) median(x, na.rm=T)))
#set up ordered species names#
spp=d$species#
spp[spp=="y"]<-"punY"#
spp[spp=="x"]<-"punX"#
d$sppNum = factor(spp, levels=c("tym", "sin", "punY", "punX"), ordered=T)#
levels(d$sppNum)
dmeds = data.frame(tapply(d$score, INDEX=d$sppNum, function(x) median(x, na.rm=T)))
dmeds
#-------- PROVEAN RESULTS --------##
ll=load("provean.Rdata")#
#d = the provean scores#
#psub = the provean scores for mutations private to each species/chromosomes#
#ratios = the ratio of bad to ok mutations (bad <= -2.5 score)#
#private.ratios = same but for private mutations#
#tbl = the table of bad and ok mutations to use for chi square test#
#private.tbl = same but for private mutations#
colnames(d)[7]='species'#
colnames(psub)[7]='species'#
d$score = d$score*-1#
psub$score = psub$score*-1#
head(d)#
head(psub)
#set up ordered species names#
spp=d$species#
spp[spp=="y"]<-"punY"#
spp[spp=="x"]<-"punX"#
d$sppNum = factor(spp, levels=c("tym", "sin", "punY", "punX"), ordered=T)#
levels(d$sppNum)
dmeds = data.frame(tapply(d$score, INDEX=d$sppNum, function(x) median(x, na.rm=T)))
dmeds
head(d)
dmeds = data.frame(tapply(d$score, INDEX=d$sppNum, function(x) median(x, na.rm=T)))
dmeds = data.frame(tapply(d$score, INDEX=d$sppNum, function(x) mean(x, na.rm=T)))
dmeds
dmeds = data.frame(tapply(d$score, INDEX=d$sppNum, function(x) median(x, na.rm=T)))
dmeds
colnames(dmeds) = c('y')#
dmeds$sppNum = rownames(dmeds)#
dmeds$spp = spp#
dmeds$x1 = 1:4 - 0.2#
dmeds$x2 = 1:4 + 0.2#
dmeds
#plot violin plot#
all.provean.violin = ggplot(data=d) +#
	geom_violin(aes(x=sppNum, y=score, col=sppNum, fill=sppNum), na.rm=T) +#
	geom_segment(data=dmeds, aes(x=x1, y=y, xend=x2, yend=y), lwd=1) +#
	scale_color_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	scale_x_discrete(breaks=1:4, labels=names(num)) +#
	labs(y='deleteriousness', x='', subtitle='All variants') + #
	theme(legend.position='none',axis.text.x = element_text(angle= xlabAngle))#
plot(all.provean.violin)
#plot violin plot#
all.provean.violin = ggplot(data=d) +#
	geom_violin(aes(x=sppNum, y=score, col=sppNum, fill=sppNum), na.rm=T) +#
	geom_segment(data=dmeds, aes(x=x1, y=y, xend=x2, yend=y), lwd=1) +#
	scale_color_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	# scale_x_discrete(breaks=1:4, labels=names(num)) +#
	labs(y='deleteriousness', x='', subtitle='All variants') + #
	theme(legend.position='none',axis.text.x = element_text(angle= xlabAngle))#
plot(all.provean.violin)
xlabAngle
xlabAngle=20
rm(list=ls())
#plot_figure6_degeneration.R#
#
library(ggplot2)#
library(cowplot)#
setwd("~/gitreps/pungitius_sex_chromosome/figure_plotting")#
#
#set up global plotting variables#
male.col = 'dodgerblue'#
female.col = 'firebrick'#
sin.col = 'forestgreen'#
tym.col = 'mediumseagreen'#
xlabAngle=20#
#
#load depth comparisons#
ll=load('depthPlots.Rdata')#
ll#
dp1 = dp1 + labs(x="Position (Mb)", y='M:F coverage', subtitle='G. aculeatus') + theme(plot.subtitle=element_text(face="italic")) #
dp2 = dp2 + labs(x="Position (Mb)", y='M:F coverage', subtitle='P. pungitius') + theme(plot.subtitle=element_text(face="italic")) #
plot_grid(dp1, dp2, ncol=2)#
#
#-------- REPETITIVE ELEMENT ENRICHMENT --------##
#LOAD DATA#
ll=load("repetitiveElements.Rdata")#
#rep.res = the DESeq2 results for repetitive elements#
#s = the set of repetitive elements with sinificantly different fold coverage between males and females#
#mt = the estimated proportion of reads mapped to repetitive elements#
ll#
#
#BUILD FIGURES#
#
#density plot#
den=density(s$log2FoldChange)#
den.df = data.frame(x=den$x, y=den$y)#
male.df = den.df[den.df$x >=max(den.df$x[den.df$x<0]),]#
female.df = den.df[den.df$x <= 0,]#
denRep=ggplot(data=female.df, aes(x=x, y=y)) + #
	geom_vline(aes(xintercept=0), linetype='dashed') +#
	geom_line(col=female.col) + #
	geom_area(fill=female.col) +#
	geom_line(data=male.df, aes(x=x,y=y), col=male.col) + #
	geom_area(data=male.df, aes(x=x,y=y), fill=male.col) +#
	lims(x=c(-3.3, 3.3)) +#
	# scale_x_continuous(limits = c(-0.03, 0.22)) +#
	# geom_segment(data=d12, aes(x=d, y=y1, xend=d, yend=y2), lineend='round', lwd=1.2) +#
	labs(x="", y="")#
plot(denRep)#
#stats#
rep.res$sig = rep.res$padj < 0.1#
m = rep.res[rep.res$log2FoldChange>0,]#
osig = sum(m$sig, na.rm=T)#
esig = round(sum(rep.res$sig, na.rm=T)/2, digits=0)#
ons = sum(!m$sig, na.rm=T)#
ens = round(sum(!rep.res$sig, na.rm=T)/2, digits=0)#
sig = c(osig, esig)#
notsig = c(ons, ens)#
stbl = rbind(sig, notsig)#
colnames(stbl) = c('observed', 'expected')#
fisher.test(stbl, alternative='greater')#
#
#BOXPLOT#
mt$pct = mt$x / 1e6 * 100#
repBox=ggplot(data=mt) + #
	geom_boxplot(aes(x=sex, y=pct), col=c(female.col, male.col), lwd=1) +#
	labs(y="% reads", x="Sex") +#
	labs(subtitle='Repetitive elements') #
	# lims(y=c(6.1, 6.65))#
plot(repBox)#
#
#stats#
tapply(mt$x, INDEX=mt$sex, mean)#
male = mt$x[mt$sex=="M"]#
female = mt$x[mt$sex=="F"]#
t.test(x=male, y=female, alternative='greater')#
# PLOT VOLCANO PLOT#
res.df = data.frame(rep.res)#
res.df$logp = -log(res.df$pvalue, 10)#
s.res.df = res.df[res.df$padj < 0.1,]#
male = rep('male (10)', nrow(s.res.df))#
male[s.res.df$log2FoldChange < 0]<-'female (3)'#
s.res.df$significant = male#
volcano = ggplot(data=res.df, aes(x=log2FoldChange, y=logp)) + #
	geom_point(col='black', alpha=0.3) +#
	geom_point(data=s.res.df, aes(x=log2FoldChange, y=logp, col=significant), size=2.5) +#
	scale_colour_manual(values=c('firebrick','dodgerblue')) +#
	xlab(bquote(log[2]*"(M:F)")) +#
	ylab(bquote(-log[10]*"(p)" )) +#
	# lims(x=c(-3.2, 3.2), y=c(0, 20)) +#
	labs(subtitle='Repetitive elements') +#
	theme(legend.position="none")#
plot(volcano)#
#
volcanoLenged = ggplot(data=res.df, aes(x=log2FoldChange, y=logp)) + #
	geom_point(col='black', alpha=0.3) +#
	geom_point(data=s.res.df, aes(x=log2FoldChange, y=logp, col=significant), size=2.5) +#
	scale_colour_manual(values=c('firebrick','dodgerblue')) +#
	xlab(bquote(log[2]*"(M:F)")) +#
	ylab(bquote(-log[10]*"(p)" )) +#
	labs(subtitle='Repetitive\nelements') +#
	lims(x=c(-3.2, 3.2), y=c(0,17)) #
plot(volcanoLenged)#
#
plot_grid(denRep, repBox, ncol=2)#
plot_grid(volcano, repBox, ncol=2)#
#
#====================================================##
#
#------------------ PAIRWISE dN/dS against 3-spine ------------------##
#The ggplot boxplots are strange, so went with violin plots, with the median values drawn manually#
#
#LOAD#
ll=load('pairwisedNdS.Rdata')#
#ad = 'all data' these are the dNdS values for all variants#
#pd = 'private data' these are the dNdS values based only on private variants#
#sind = 'sin dnds' these are the pairwise comparisons with sinensis for all varants#
pd$species=sub('private', '', pd$species)#
ll#
#
do.wilcox = function(sp1, sp2, df, stat){#
	stat1 = df[df$species == sp1, stat]#
	stat2 = df[df$species == sp2, stat]#
	sub = df[df$species %in% c(sp1, sp2),]#
	w=wilcox.test(x=stat1, y=stat2)#
	boxplot(sub[,stat]~sub[,'species'], outline=F, main=paste("p =",w$p.value))#
	return(w)#
}#
#ALL VARINATS VIOLIN PLOT#
#set up data to plot species in order#
spp=ad$species#
spp[spp=="Y"]<-"punY"#
spp[spp=="X"]<-"punX"#
ad$species=spp#
ad$species = factor(ad$species, levels=c("tym", "sin", "punY", "punX"), ordered=T)#
levels(ad$species)#
#
#set up data for line segments at medians#
meds = data.frame(tapply(ad$dNdS, INDEX=ad$species, function(x) median(x, na.rm=T)))#
colnames(meds) = c('y')#
meds$x1 = 1:4 - 0.2#
meds$x2 = 1:4 + 0.2#
all.dnds.violin = ggplot(data=ad) + #
	geom_violin(aes(x=species, y=dNdS, fill=species, col=species), na.rm=T) +#
	# geom_point(data=pmeds, aes(x=x, y=y), pch="-", size=10) +#
	geom_segment(data=meds, aes(x=x1, y=y, xend=x2, yend=y), lwd=1.5) +#
	scale_color_manual(values=c(sin.col, tym.col, female.col, male.col)) +#
	scale_fill_manual(values=c(sin.col, tym.col, female.col, male.col)) +#
	# scale_x_discrete(breaks=1:4, labels=names(num)) +#
	lims(y=c(-.1, 0.5)) +#
	labs(y='dN/dS', x='', subtitle='All variants') +#
	theme(legend.position="none",axis.text.x = element_text(angle= xlabAngle))#
print(all.dnds.violin)#
#
#standard boxplot to doublecheck the figure#
quartz()#
boxplot(ad$dNdS~ad$species, outline=F)#
#make a similar figure for pairwise dS against 3-spine#
meds = data.frame(tapply(ad$dS, INDEX=ad$species, function(x) median(x, na.rm=T)))#
colnames(meds) = c('y')#
meds$x1 = 1:4 - 0.2#
meds$x2 = 1:4 + 0.2#
all.dS.violin = ggplot(data=ad) + #
	geom_violin(aes(x=species, y=dS, fill=species, col=species), na.rm=T) +#
	# geom_point(data=pmeds, aes(x=x, y=y), pch="-", size=10) +#
	geom_segment(data=meds, aes(x=x1, y=y, xend=x2, yend=y), lwd=1.5) +#
	scale_color_manual(values=c(sin.col, tym.col, female.col, male.col)) +#
	scale_fill_manual(values=c(sin.col, tym.col, female.col, male.col)) +#
	lims(y=c(-.1, 0.5)) +#
	labs(y='pairwise dS vs G. aculeatus', x='', subtitle='All variants') +#
	theme(legend.position="none",axis.text.x = element_text(angle= xlabAngle))#
print(all.dS.violin)#
#
#standard boxplot to doublecheck the figure#
quartz()#
boxplot(ad$dS~ad$species, outline=F)#
#
#PRIVATE VARIANTS VIOLIN PLOT#
#
#set up data to plot species in order#
spp=pd$species#
spp[spp=="Y"]<-"punY"#
spp[spp=="X"]<-"punX"#
pd$species=spp#
pd$species = factor(pd$species, levels=c("tym", "sin", "punY", "punX"), ordered=T)#
levels(pd$species)#
#
#set up medians#
pmeds = data.frame(tapply(pd$dNdS, INDEX=pd$species, function(x) median(x, na.rm=T)))#
colnames(pmeds) = c('y')#
pmeds$spp = rownames(pmeds)#
pmeds$x1 = 1:4 - 0.2#
pmeds$x2 = 1:4 + 0.2#
pmeds#
#
private.dnds.violin = ggplot(data=pd) + #
	geom_violin(aes(x=species, y=dNdS, fill=species, col=species), na.rm=T) +#
	geom_segment(data=pmeds, aes(x=x1, y=y, xend=x2, yend=y), lwd=1) +#
	scale_color_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	# scale_x_discrete(breaks=1:4, labels=names(num)) +#
	lims(y=c(-.1, 0.5)) +#
	labs(y='dN/dS', x='', subtitle ='Private variants') +#
	theme(legend.position="none",axis.text.x = element_text(angle= xlabAngle))#
print(private.dnds.violin)#
#
#boxplot to doublecheck#
quartz()#
boxplot(pd$dNdS~pd$species, outline=F, ylim=c(-.1, 0.5))#
#
#stats#
do.wilcox('X', 'tym', pd, 'dNdS')#
do.wilcox('X', 'sin', pd, 'dNdS')#
do.wilcox('Y', 'sin', pd, 'dNdS')#
do.wilcox('X', 'Y', pd, 'dNdS')#
#REPEAT THE PRIVATE VIOLIN PLOT FOR dS against 3-spine#
#
#set up medians#
pmeds = data.frame(tapply(pd$dS, INDEX=pd$species, function(x) median(x, na.rm=T)))#
colnames(pmeds) = c('y')#
pmeds$spp = rownames(pmeds)#
pmeds$x1 = 1:4 - 0.2#
pmeds$x2 = 1:4 + 0.2#
pmeds#
#
private.dS.violin = ggplot(data=pd) + #
	geom_violin(aes(x=species, y=dS, fill=species, col=species), na.rm=T) +#
	geom_segment(data=pmeds, aes(x=x1, y=y, xend=x2, yend=y), lwd=1) +#
	scale_color_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	# scale_x_discrete(breaks=1:4, labels=names(num)) +#
	lims(y=c(-.01, 0.1)) +#
	labs(y='pairwise dS vs G. aculeatus', x='', subtitle ='Private variants') +#
	theme(legend.position="none",axis.text.x = element_text(angle= xlabAngle))#
print(private.dS.violin)#
#
#boxplot to doublecheck#
quartz()#
boxplot(pd$dNdS~pd$species, outline=F, ylim=c(-.1, 0.5))#
#-------- PROVEAN RESULTS --------##
ll=load("provean.Rdata")#
#d = the provean scores#
#psub = the provean scores for mutations private to each species/chromosomes#
#ratios = the ratio of bad to ok mutations (bad <= -2.5 score)#
#private.ratios = same but for private mutations#
#tbl = the table of bad and ok mutations to use for chi square test#
#private.tbl = same but for private mutations#
colnames(d)[7]='species'#
colnames(psub)[7]='species'#
d$score = d$score*-1#
psub$score = psub$score*-1#
head(d)#
head(psub)#
#
#ALL VARIANTS
#set up ordered species names#
spp=d$species#
spp[spp=="y"]<-"punY"#
spp[spp=="x"]<-"punX"#
d$sppNum = factor(spp, levels=c("tym", "sin", "punY", "punX"), ordered=T)#
levels(d$sppNum)#
#
#set up medians#
dmeds = data.frame(tapply(d$score, INDEX=d$sppNum, function(x) median(x, na.rm=T)))#
colnames(dmeds) = c('y')#
dmeds$sppNum = rownames(dmeds)#
dmeds$spp = spp#
dmeds$x1 = 1:4 - 0.2#
dmeds$x2 = 1:4 + 0.2#
dmeds
#set up medians#
dmeds = data.frame(tapply(d$score, INDEX=d$sppNum, function(x) median(x, na.rm=T)))#
colnames(dmeds) = c('y')#
dmeds$sppNum = rownames(dmeds)#
dmeds$x1 = 1:4 - 0.2#
dmeds$x2 = 1:4 + 0.2#
dmeds
#plot violin plot#
all.provean.violin = ggplot(data=d) +#
	geom_violin(aes(x=sppNum, y=score, col=sppNum, fill=sppNum), na.rm=T) +#
	geom_segment(data=dmeds, aes(x=x1, y=y, xend=x2, yend=y), lwd=1) +#
	scale_color_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	# scale_x_discrete(breaks=1:4, labels=names(num)) +#
	labs(y='deleteriousness', x='', subtitle='All variants') + #
	theme(legend.position='none',axis.text.x = element_text(angle= xlabAngle))#
plot(all.provean.violin)
#plot violin plot#
all.provean.violin = ggplot(data=d) +#
	geom_violin(aes(x=sppNum, y=score, col=sppNum, fill=sppNum), na.rm=T) +#
	geom_segment(data=dmeds, aes(x=x1, y=y, xend=x2, yend=y), lwd=1) +#
	scale_color_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	# scale_x_discrete(breaks=1:4, labels=names(num)) +#
	labs(y='deleteriousness', x='', subtitle='All variants') + #
	theme(legend.position='none',axis.text.x = element_text(angle= xlabAngle))#
plot(all.provean.violin)
#set up ordered species names#
spp=psub$species#
spp[spp=="y"]<-"punY"#
spp[spp=="x"]<-"punX"#
psub$sppNum = factor(spp, levels=c("tym", "sin", "punY", "punX"), ordered=T)#
levels(psub$sppNum)
#set up medians#
psmeds = data.frame(tapply(psub$score, INDEX=psub$sppNum, function(x) median(x, na.rm=T)))#
colnames(psmeds) = c('y')#
psmeds$sppNum = rownames(psmeds)#
psmeds$spp = spp#
psmeds$x1 = 1:4 - 0.2#
psmeds$x2 = 1:4 + 0.2#
psmeds
#plot violin plot#
all.provean.violin = ggplot(data=d) +#
	geom_violin(aes(x=sppNum, y=score, col=sppNum, fill=sppNum), na.rm=T) +#
	geom_segment(data=dmeds, aes(x=x1, y=y, xend=x2, yend=y), lwd=1) +#
	scale_color_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	# scale_x_discrete(breaks=1:4, labels=names(num)) +#
	labs(y='Provean score', x='', subtitle='All variants') + #
	theme(legend.position='none',axis.text.x = element_text(angle= xlabAngle))#
plot(all.provean.violin)
#set up ordered species names#
spp=d$species#
spp[spp=="y"]<-"punY"#
spp[spp=="x"]<-"punX"#
d$sppNum = factor(spp, levels=c("tym", "sin", "punY", "punX"), ordered=T)#
levels(d$sppNum)#
#
#set up medians#
dmeds = data.frame(tapply(d$score, INDEX=d$sppNum, function(x) median(x, na.rm=T)))#
colnames(dmeds) = c('y')#
dmeds$sppNum = rownames(dmeds)#
dmeds$x1 = 1:4 - 0.2#
dmeds$x2 = 1:4 + 0.2#
dmeds#
#plot violin plot#
all.provean.violin = ggplot(data=d) +#
	geom_violin(aes(x=sppNum, y=score, col=sppNum, fill=sppNum), na.rm=T) +#
	geom_segment(data=dmeds, aes(x=x1, y=y, xend=x2, yend=y), lwd=1) +#
	scale_color_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	# scale_x_discrete(breaks=1:4, labels=names(num)) +#
	labs(y='Provean score', x='', subtitle='All variants') + #
	theme(legend.position='none',axis.text.x = element_text(angle= xlabAngle))#
plot(all.provean.violin)
#-------- PROVEAN RESULTS --------##
ll=load("provean.Rdata")#
#d = the provean scores#
#psub = the provean scores for mutations private to each species/chromosomes#
#ratios = the ratio of bad to ok mutations (bad <= -2.5 score)#
#private.ratios = same but for private mutations#
#tbl = the table of bad and ok mutations to use for chi square test#
#private.tbl = same but for private mutations#
colnames(d)[7]='species'#
colnames(psub)[7]='species'#
# d$score = d$score*-1#
# psub$score = psub$score*-1#
head(d)#
head(psub)#
#
#ALL VARIANTS#
#
#set up ordered species names#
spp=d$species#
spp[spp=="y"]<-"punY"#
spp[spp=="x"]<-"punX"#
d$sppNum = factor(spp, levels=c("tym", "sin", "punY", "punX"), ordered=T)#
levels(d$sppNum)#
#
#set up medians#
dmeds = data.frame(tapply(d$score, INDEX=d$sppNum, function(x) median(x, na.rm=T)))#
colnames(dmeds) = c('y')#
dmeds$sppNum = rownames(dmeds)#
dmeds$x1 = 1:4 - 0.2#
dmeds$x2 = 1:4 + 0.2#
dmeds#
#plot violin plot#
all.provean.violin = ggplot(data=d) +#
	geom_violin(aes(x=sppNum, y=score, col=sppNum, fill=sppNum), na.rm=T) +#
	geom_segment(data=dmeds, aes(x=x1, y=y, xend=x2, yend=y), lwd=1) +#
	scale_color_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	# scale_x_discrete(breaks=1:4, labels=names(num)) +#
	labs(y='Provean score', x='', subtitle='All variants') + #
	theme(legend.position='none',axis.text.x = element_text(angle= xlabAngle))#
plot(all.provean.violin)
#PRIVATE VARIANTS#
#set up ordered species names#
spp=psub$species#
spp[spp=="y"]<-"punY"#
spp[spp=="x"]<-"punX"#
psub$sppNum = factor(spp, levels=c("tym", "sin", "punY", "punX"), ordered=T)#
levels(psub$sppNum)#
#
#set up medians#
psmeds = data.frame(tapply(psub$score, INDEX=psub$sppNum, function(x) median(x, na.rm=T)))#
colnames(psmeds) = c('y')#
psmeds$sppNum = rownames(psmeds)#
psmeds$spp = spp#
psmeds$x1 = 1:4 - 0.2#
psmeds$x2 = 1:4 + 0.2#
psmeds#
#
#plot violin plot#
private.provean.violin = ggplot(data=psub) +#
	geom_violin(aes(x=sppNum, y=score, col=sppNum, fill=sppNum), na.rm=T) +#
	geom_segment(data=psmeds, aes(x=x1, y=y, xend=x2, yend=y), lwd=1) +#
	scale_color_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	labs(y='Provean score', x='', subtitle="Private variants") + #
	theme(legend.position='none',#
		axis.text.x = element_text(angle= xlabAngle))#
plot(private.provean.violin)
boxplot(d$score~d$species, outline=F)
boxplot(psub$score~d$species, outline=F)
boxplot(psub$score~psub$species, outline=F)
boxplot(d$score~d$sppNum, outline=F)
boxplot(psub$score~psub$sppNum, outline=F)
#DO STATS#
#
siny = psub[psub$sample %in% c('tym', 'y'),]#
siny$sample=as.factor(siny$sample)#
t.test(siny$score~ siny$sample)
siny = psub[psub$sample %in% c('tym', 'punY'),]
siny$sample=as.factor(siny$sample)
t.test(siny$score~ siny$sample)
head(siny)
head(psub)
siny = psub[psub$sppNum %in% c('tym', 'punY'),]
siny$sample=as.factor(siny$sample)
siny$sample=as.factor(siny$sppNum)
siny = psub[psub$sppNum %in% c('tym', 'punY'),]
head(siny)
siny$sample=as.factor(siny$sppNum)
t.test(siny$score~ siny$sample)
siny = psub[psub$sppNum %in% c('sin', 'punY'),]
siny$sample=as.factor(siny$sppNum)#
t.test(siny$score~ siny$sample)
prov.dat = psub
head(psub)
#PLOT THRESHOLD BASED WAY#
prov.dat = psub#
CUT=-2.5#
prov.dat$bad = as.numeric(prov.dat$score <= CUT)#
prov.dat$ok = as.numeric(prov.dat$score > CUT)#
sums = tapply(prov.dat$bad, INDEX= prov.dat$sample, function(x) sum(x, na.rm=T))#
oksums = tapply(prov.dat$ok, INDEX= prov.dat$sample, function(x) sum(x, na.rm=T))#
private.ratios = sums / (sums + oksums)#
private.tbl = rbind(sums, oksums)#
barplot(sums)
sums = tapply(prov.dat$bad, INDEX= prov.dat$sample, function(x) sum(x, na.rm=T))
sums = tapply(prov.dat$bad, INDEX= prov.dat$sppNum, function(x) sum(x, na.rm=T))
oksums = tapply(prov.dat$ok, INDEX= prov.dat$sppNum, function(x) sum(x, na.rm=T))
private.ratios = sums / (sums + oksums)#
private.tbl = rbind(sums, oksums)#
barplot(sums)
barplot(private.ratios)
get_ratios(d)
get_ratios = function(prov.dat, cutoff){#
	prov.dat$bad = as.numeric(prov.dat$score <= cutoff)#
	prov.dat$ok = as.numeric(prov.dat$score > cutoff)#
	sums = tapply(prov.dat$bad, INDEX= prov.dat$sppNum, function(x) sum(x, na.rm=T))#
	oksums = tapply(prov.dat$ok, INDEX= prov.dat$sppNum, function(x) sum(x, na.rm=T))#
	private.ratios = sums / (sums + oksums)#
	private.tbl = rbind(sums, oksums)#
	return(private.ratios)#
}
get_ratios(d, CUT)
all.ratios = get_ratios(d, CUT)
private.ratios = get_ratios(psub, CUT)
private.ratios = get_ratios(psub, CUT)
all.ratios
private.ratios
get_ratios = function(prov.dat, cutoff){#
	prov.dat$bad = as.numeric(prov.dat$score <= cutoff)#
	prov.dat$ok = as.numeric(prov.dat$score > cutoff)#
	sums = tapply(prov.dat$bad, INDEX= prov.dat$sppNum, function(x) sum(x, na.rm=T))#
	oksums = tapply(prov.dat$ok, INDEX= prov.dat$sppNum, function(x) sum(x, na.rm=T))#
	private.ratios = sums / (sums + oksums)#
	private.tbl = rbind(sums, oksums)#
	res = list(private.ratios, private.tbl)#
	return(res)#
}#
#
all.res = get_ratios(d, CUT)#
private.res = get_ratios(psub, CUT)
a.ratios = all.res[[1]]
a.ratios
a.ratios = all.res[[1]]#
p.ratios = private.res[[1]]#
a.counts = all.res[[2]]#
p.counts = private.res[[2]]
a.ratios
a.ratios = data.frame(all.res[[1]])
a.ratios
get_ratios = function(prov.dat, cutoff){#
	prov.dat$bad = as.numeric(prov.dat$score <= cutoff)#
	prov.dat$ok = as.numeric(prov.dat$score > cutoff)#
	sums = tapply(prov.dat$bad, INDEX= prov.dat$sppNum, function(x) sum(x, na.rm=T))#
	oksums = tapply(prov.dat$ok, INDEX= prov.dat$sppNum, function(x) sum(x, na.rm=T))#
	private.ratios = data.frame(sums / (sums + oksums))#
	colnames(private.ratios) = c('pscore')#
	private.tbl = rbind(sums, oksums)#
	res = list(private.ratios, private.tbl)#
	return(res)#
}
p.ratios = private.res[[1]]
p.ratios
all.res = get_ratios(d, CUT)#
private.res = get_ratios(psub, CUT)#
a.ratios =all.res[[1]]#
p.ratios = private.res[[1]]#
a.counts = all.res[[2]]#
p.counts = private.res[[2]]
p.ratios
a.ratios
all.prov.barplot = ggplot(a.ratios) + #
	geom_bar(aes(y=pscore))#
plot(all.prov.barplot)
?geom_bar
all.prov.barplot = ggplot(a.ratios) + #
	geom_bar(aes(y=pscore), stat='identity')#
plot(all.prov.barplot)
a.ratios
all.prov.barplot = ggplot(a.ratios) + #
	geom_bar(aes(y=pscore), stat='identity')#
plot(all.prov.barplot)
all.prov.barplot = ggplot(a.ratios) + #
	geom_bar(aes(y=pscore, x=1:nrow(a.ratios)), stat='identity')#
plot(all.prov.barplot)
all.prov.barplot = ggplot(a.ratios) + #
	geom_bar(aes(y=pscore, x=rownames(a.ratios)), stat='identity')#
plot(all.prov.barplot)
a.ratios
get_ratios = function(prov.dat, cutoff){#
	prov.dat$bad = as.numeric(prov.dat$score <= cutoff)#
	prov.dat$ok = as.numeric(prov.dat$score > cutoff)#
	sums = tapply(prov.dat$bad, INDEX= prov.dat$sppNum, function(x) sum(x, na.rm=T))#
	oksums = tapply(prov.dat$ok, INDEX= prov.dat$sppNum, function(x) sum(x, na.rm=T))#
	private.ratios = data.frame(sums / (sums + oksums))#
	colnames(private.ratios) = c('pscore')#
	private.ratios = factor(rownames(private.ratios), ordered=T)#
	private.tbl = rbind(sums, oksums)#
	res = list(private.ratios, private.tbl)#
	return(res)#
}
get_ratios = function(prov.dat, cutoff){#
	prov.dat$bad = as.numeric(prov.dat$score <= cutoff)#
	prov.dat$ok = as.numeric(prov.dat$score > cutoff)#
	sums = tapply(prov.dat$bad, INDEX= prov.dat$sppNum, function(x) sum(x, na.rm=T))#
	oksums = tapply(prov.dat$ok, INDEX= prov.dat$sppNum, function(x) sum(x, na.rm=T))#
	private.ratios = data.frame(sums / (sums + oksums))#
	colnames(private.ratios) = c('pscore')#
	private.ratios = factor(rownames(private.ratios), ordered=T)#
	private.tbl = rbind(sums, oksums)#
	res = list(private.ratios, private.tbl)#
	return(res)#
}
all.res = get_ratios(d, CUT)#
private.res = get_ratios(psub, CUT)#
a.ratios =all.res[[1]]#
p.ratios = private.res[[1]]#
a.counts = all.res[[2]]#
p.counts = private.res[[2]]
a.ratios
get_ratios = function(prov.dat, cutoff){#
	prov.dat$bad = as.numeric(prov.dat$score <= cutoff)#
	prov.dat$ok = as.numeric(prov.dat$score > cutoff)#
	sums = tapply(prov.dat$bad, INDEX= prov.dat$sppNum, function(x) sum(x, na.rm=T))#
	oksums = tapply(prov.dat$ok, INDEX= prov.dat$sppNum, function(x) sum(x, na.rm=T))#
	private.ratios = data.frame(sums / (sums + oksums))#
	colnames(private.ratios) = c('pscore')#
	private.ratios$sppNum = factor(rownames(private.ratios), ordered=T)#
	private.tbl = rbind(sums, oksums)#
	res = list(private.ratios, private.tbl)#
	return(res)#
}#
all.res = get_ratios(d, CUT)#
private.res = get_ratios(psub, CUT)#
a.ratios =all.res[[1]]#
p.ratios = private.res[[1]]#
a.counts = all.res[[2]]#
p.counts = private.res[[2]]
a.ratios
all.prov.barplot = ggplot(a.ratios) + #
	geom_bar(aes(y=pscore, x=sppNum), stat='identity')#
plot(all.prov.barplot)
p.prov.barplot = ggplot(p.ratios) + #
	geom_bar(aes(y=pscore, x=sppNum), stat='identity')#
plot(p.prov.barplot)
get_ratios = function(prov.dat, cutoff){#
	prov.dat$bad = as.numeric(prov.dat$score <= cutoff)#
	prov.dat$ok = as.numeric(prov.dat$score > cutoff)#
	sums = tapply(prov.dat$bad, INDEX= prov.dat$sppNum, function(x) sum(x, na.rm=T))#
	oksums = tapply(prov.dat$ok, INDEX= prov.dat$sppNum, function(x) sum(x, na.rm=T))#
	private.ratios = data.frame(sums / (sums + oksums))#
	colnames(private.ratios) = c('pscore')#
	private.ratios$sppNum = factor(rownames(private.ratios), ordered=T, levels = c('tym', 'sin', 'punY', 'punX'))#
	private.tbl = rbind(sums, oksums)#
	res = list(private.ratios, private.tbl)#
	return(res)#
}#
all.res = get_ratios(d, CUT)#
private.res = get_ratios(psub, CUT)#
a.ratios =all.res[[1]]#
p.ratios = private.res[[1]]#
a.counts = all.res[[2]]#
p.counts = private.res[[2]]#
#
all.prov.barplot = ggplot(a.ratios) + #
	geom_bar(aes(y=pscore, x=sppNum), stat='identity')#
plot(all.prov.barplot)
p.prov.barplot = ggplot(p.ratios) + #
	geom_bar(aes(y=pscore, x=sppNum), stat='identity')#
plot(p.prov.barplot)
all.prov.barplot = ggplot(a.ratios) + #
	geom_bar(aes(y=pscore, x=sppNum), stat='identity') +#
	labs(subtitle="All variants")#
plot(all.prov.barplot)
p.prov.barplot = ggplot(p.ratios) + #
	geom_bar(aes(y=pscore, x=sppNum), stat='identity') +#
	labs(subtitle = "Private variants")#
plot(p.prov.barplot)
all.res = get_ratios(d, CUT)#
private.res = get_ratios(psub, CUT)#
a.ratios =all.res[[1]]#
p.ratios = private.res[[1]]#
a.counts = all.res[[2]]#
p.counts = private.res[[2]]#
#
all.prov.barplot = ggplot(a.ratios) + #
	geom_bar(aes(y=pscore, x=sppNum), stat='identity') +#
	labs(subtitle="All variants", ylab = "% provean < -2.5")#
plot(all.prov.barplot)
all.prov.barplot = ggplot(a.ratios) + #
	geom_bar(aes(y=pscore, x=sppNum), stat='identity') +#
	labs(subtitle="All variants", y = "% provean < -2.5")#
plot(all.prov.barplot)
p.prov.barplot = ggplot(p.ratios) + #
	geom_bar(aes(y=pscore, x=sppNum), stat='identity') +#
	labs(subtitle = "Private variants", ylab = "% provean < -2.5")#
plot(p.prov.barplot)
p.prov.barplot = ggplot(p.ratios) + #
	geom_bar(aes(y=pscore, x=sppNum, fill=sppNum), stat='identity') +#
	scale_color_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	labs(subtitle = "Private variants", ylab = "% provean < -2.5")#
plot(p.prov.barplot)
p.prov.barplot = ggplot(p.ratios) + #
	geom_bar(aes(y=pscore, x=sppNum, fill=sppNum), stat='identity') +#
	# scale_color_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	scale_fil_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	labs(subtitle = "Private variants", ylab = "% provean < -2.5")#
plot(p.prov.barplot)
p.prov.barplot = ggplot(p.ratios) + #
	geom_bar(aes(y=pscore, x=sppNum, fill=sppNum), stat='identity') +#
	# scale_color_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	labs(subtitle = "Private variants", ylab = "% provean < -2.5")#
plot(p.prov.barplot)
all.prov.barplot = ggplot(a.ratios) + #
	geom_bar(aes(y=pscore, x=sppNum), stat='identity', color=sppNum) +#
	labs(subtitle="All variants", y = "% provean < -2.5") +#
	theme(legend.position='none',#
		axis.text.x = element_text(angle= xlabAngle))#
plot(all.prov.barplot)
axis.text.x
all.prov.barplot = ggplot(a.ratios) + #
	geom_bar(aes(y=pscore, x=sppNum), stat='identity', color=sppNum) +#
	labs(subtitle="All variants", y = "% provean < -2.5") +#
	theme(legend.position='none',#
		axis.text.x = element_text(angle= xlabAngle))#
plot(all.prov.barplot)
a.ratios
all.prov.barplot = ggplot(a.ratios) + #
	geom_bar(aes(y=pscore, x=sppNum, fill=sppNum), stat='identity') +#
	labs(subtitle="All variants", y = "% provean < -2.5") +#
	theme(legend.position='none',#
		axis.text.x = element_text(angle= xlabAngle))#
plot(all.prov.barplot)
all.prov.barplot = ggplot(a.ratios) + #
	geom_bar(aes(y=pscore, x=sppNum, fill=sppNum), stat='identity') +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	labs(subtitle="All variants", y = "% provean < -2.5") +#
	theme(legend.position='none',#
		axis.text.x = element_text(angle= xlabAngle))#
plot(all.prov.barplot)
get_ratios = function(prov.dat, cutoff){#
	prov.dat$bad = as.numeric(prov.dat$score <= cutoff)#
	prov.dat$ok = as.numeric(prov.dat$score > cutoff)#
	sums = tapply(prov.dat$bad, INDEX= prov.dat$sppNum, function(x) sum(x, na.rm=T))#
	oksums = tapply(prov.dat$ok, INDEX= prov.dat$sppNum, function(x) sum(x, na.rm=T))#
	private.ratios = data.frame( (sums / (sums + oksums)))#
	colnames(private.ratios) = c('pscore')#
	private.ratios$sppNum = factor(rownames(private.ratios), ordered=T, levels = c('tym', 'sin', 'punY', 'punX'))#
	private.tbl = rbind(sums, oksums)#
	res = list(private.ratios, private.tbl)#
	return(res)#
}#
all.res = get_ratios(d, CUT)#
private.res = get_ratios(psub, CUT)#
a.ratios =all.res[[1]]#
p.ratios = private.res[[1]]#
a.counts = all.res[[2]]#
p.counts = private.res[[2]]#
#
all.prov.barplot = ggplot(a.ratios) + #
	geom_bar(aes(y=pscore, x=sppNum, fill=sppNum), stat='identity') +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	labs(subtitle="All variants", y = "provean < -2.5") +#
	theme(legend.position='none',#
		axis.text.x = element_text(angle= xlabAngle))#
plot(all.prov.barplot)
all.prov.barplot = ggplot(a.ratios) + #
	geom_bar(aes(y=pscore, x=sppNum, fill=sppNum), stat='identity') +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	labs(subtitle="All variants", y = "provean < -2.5", x='') +#
	theme(legend.position='none',#
		axis.text.x = element_text(angle= xlabAngle))#
plot(all.prov.barplot)#
#
p.prov.barplot = ggplot(p.ratios) + #
	geom_bar(aes(y=pscore, x=sppNum, fill=sppNum), stat='identity') +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	labs(subtitle = "Private variants", ylab = "provean < -2.5", x='') +#
	theme(legend.position='none',#
		axis.text.x = element_text(angle= xlabAngle))#
plot(p.prov.barplot)
p.prov.barplot = ggplot(p.ratios) + #
	geom_bar(aes(y=pscore, x=sppNum, fill=sppNum), stat='identity') +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	labs(subtitle = "Private variants", y = "provean < -2.5", x='') +#
	theme(legend.position='none',#
		axis.text.x = element_text(angle= xlabAngle))#
plot(p.prov.barplot)
all.prov.barplot = ggplot(a.ratios) + #
	geom_bar(aes(y=pscore, x=sppNum, fill=sppNum), stat='identity') +#
	scale_fill_manual(values=c(tym.col, sin.col, male.col, female.col)) +#
	labs(subtitle="All variants", y = "provean < -2.5", x='') +#
	theme(legend.position='none',#
		axis.text.x = element_text(angle= xlabAngle))#
plot(all.prov.barplot)
chisq.test(p.counts[,c('x','y')])
p.counts
chisq.test(p.counts[,c('punY','punX')])
chisq.test(p.counts[,c('sin','punX')])
plot(private.provean.violin)
plot(all.provean.violin)
#---- PLOT ALL TOGETHER ----##
#DEPTH#
plot(dp1)#
plot(dp2)#
#
#REPETITIVE ELEMENTS#
# plot(volcanoLenged)#
plot(volcano)#
plot(repBox)#
#dNdS #
#all#
plot(all.dnds.violin)#
plot(private.dnds.violin)#
#PROVEAN#
plot(all.provean.violin)#
plot(private.provean.violin)#
LETTERS[1:8]
plot_grid(dp1, dp2, all.dnds.violin, private.dnds.violin, volcano, repBox, all.provean.violin, private.provean.violin, ncol=4, labels=c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'), label_size=18)
plot_grid(all.prov.barplot, p.prov.barplot)
plot_grid(all.prov.barplot, p.prov.barplot)
plot_grid(all.prov.barplot, p.prov.barplot, labels=c("A", "B"))
head(psub)
chisq.test(p.counts[,c('punY','punX')])
chisq.test(p.counts[,c('punY','sin')])
p.counts
p.counts[,c('punY','sin')]
25/171
52/171
87/(87+241)
chisq.test(p.counts[,c('punY','punX')])
