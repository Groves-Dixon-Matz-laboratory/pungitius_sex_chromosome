rm(list=ls())
#plot_male_labeled_twisst.R#
source("~/gitreps/stickle_back_sex_chromosomes/scripts/twisst_plotting_functions.R")
setwd('~/gitreps/stickle_back_sex_chromosomes/results/twisst/new_yLabeled_100Kb_yoshida_removed') #new one with just Yoshida (use this one)
rm(list=ls())
library(ggplot2)#
library(cowplot)#
library(scales)#
source("~/gitreps/stickle_back_sex_chromosomes/scripts/twisst_plotting_functions.R")#
setwd('~/gitreps/pungitius_sex_chromosome/gene_trees/Y_inference/twisst') #new one with just Yoshida (use this one)
#weights file with a column for each topology#
weights_file <- "weights1_chrXII.csv"#
#
#coordinates file for each window#
window_data_file <- "chrXII_w100000_s100000_windowData.tsv"; chr="chrXII"
topoFile = "topos.txt" #note this is where they are stored
topoFile
###### read data ###################
weights = read.csv(weights_file, header = T)#
head(weights)#
#normalise rows so weights sum to 1#
weights <- weights / apply(weights, 1, sum)#
#retrieve the names of the topologies#
topoNames = names(weights)
#weights data#
weights = read.csv(weights_file, header = T)#
head(weights)#
#normalise rows so weights sum to 1#
weights <- weights / apply(weights, 1, sum)#
#retrieve the names of the topologies#
topoNames = names(weights)#
#
#window data#
window_data = read.table(window_data_file)#
colnames(window_data) = c('window', 'start', 'end')#
window_data$scaffold = chr#
window_data$mid = apply(window_data[,c('start', 'end')], 1, mean) #
# window_data$mid = window_data$mid/1e6#
head(window_data)#
#exclude any rows where data is missing#
good_rows = which(is.na(apply(weights,1,sum)) == F)#
weights <- weights[good_rows,]#
window_data = window_data[good_rows,]
##### plot full set of toplogies ########
#
#plot means#
mod.cols = cols#
mod.cols = hue_pal(3)
sums = apply(weights, 2, sum) / 207#
contrib.df = data.frame(contrib = sums)#
contrib.df$topo=factor(rownames(contrib.df), levels=rownames(contrib.df)) #so ggplot knows they are ordered factors#
topoNums = sub("topo", "", contrib.df$topo)#
contrib.df$topoNum = factor(topoNums, levels=topoNums)#
contrib.df$color = mod.cols[1:nrow(contrib.df)]#
# bp=barplot(mns, col=cols[1:length(mns)])#
#decide mean cutoff you want to use
gbp = ggplot(contrib.df) + geom_bar(aes(y=contrib,x=topoNum, fill=topo), stat='identity') + scale_fill_manual(values=contrib.df$color) + theme(legend.pos='none') + labs(x="Topology", y="Weight Sum")# + geom_hline(yintercept=CUT, lty=2, lwd=0.25)#
plot(gbp)
library(scales)
mod.cols = hue_pal(3)
sums = apply(weights, 2, sum) / 207#
contrib.df = data.frame(contrib = sums)#
contrib.df$topo=factor(rownames(contrib.df), levels=rownames(contrib.df)) #so ggplot knows they are ordered factors#
topoNums = sub("topo", "", contrib.df$topo)#
contrib.df$topoNum = factor(topoNums, levels=topoNums)
contrib.df$color = mod.cols[1:nrow(contrib.df)]
mod.cols
mod.cols = hue_pal(3)
mod.cols
1:nrow(contrib.df)
mod.cols = hue_pal(3)[1]
? hue_pal
mod.cols = hue_pal(h=1:3)
mod.cols
hue_pal(h=1:3)
#use loess to smooth weights.#
span = 0.2#
weights_smooth <- smooth_df(x=window_data$mid,weights,col.names=colnames(weights),span=span, min=0, max=1,weights=window_data$sites)#
#rescale to sum to 1#
weights_smooth <- weights_smooth / apply(weights_smooth, 1, sum)#
reorder = colnames(weights_smooth)#
reorder[3] = colnames(weights_smooth)[2]#
reorder[2] = colnames(weights_smooth)[3]#
weights_smooth = weights_smooth[,reorder]#
#plot#
g=ggplot_weights(weights_dataframe=weights_smooth, positions=window_data$mid/1e6, line_cols=mod.cols, fill_cols=mod.cols, xlim =c(1, max(window_data$end)),stacked=T, xlab = "Position (Mb)", draw.legend=F)
#plot topo names for color associations#
x=rev(seq(1,ncol(weights_smooth)))#
y=seq(1, ncol(weights_smooth))#
plot(x~y, pch=26,xlim=c(0,(ncol(weights_smooth)+1)))#
text(x=y, y=x, labels=colnames(weights_smooth), col=contrib.df$color, cex=3)
#plot simple line plot#
dim(weights)#
line.cols = hue_pal()(3)#
LWD=2#
weights_smooth$mb = window_data$mid / 1e6#
norm.breaks = c(3.5, 18.9)#
lp = ggplot(data= weights_smooth) + #
	geom_vline(xintercept= norm.breaks[1], lty=2, lwd=0.8, color='grey') + #
	geom_vline(xintercept= norm.breaks[2], lty=2, lwd=0.8,color='grey') +#
	geom_line(aes(x=mb,y=topo3), col=line.cols[2], lwd=LWD) +#
	geom_line(aes(x=mb,y=topo2), col=line.cols[3], lwd=LWD) +#
	geom_line(aes(x=mb,y=topo1), col=line.cols[1], lwd=LWD) + #
	labs(y="Weight", x="Position (Mb)") + #
	scale_y_continuous(breaks=c(0,0.5, 1)) +#
	scale_x_continuous(breaks=c(0,10,20))#
plot(lp)
rm(list=ls())
library(ggplot2)#
library(cowplot)#
library(scales)#
source("~/gitreps/stickle_back_sex_chromosomes/scripts/twisst_plotting_functions.R")#
setwd('~/gitreps/pungitius_sex_chromosome/gene_trees/Y_inference/twisst') #new one with just Yoshida (use this one)#
#
#SET FILE NAMES#
#
#weights file with a column for each topology#
weights_file <- "weights1_chrXII.csv"#
#
#coordinates file for each window#
window_data_file <- "chrXII_w100000_s100000_windowData.tsv"; chr="chrXII"#
#
#upload toplogies#
topoFile = "topos.txt" #note this is where they are stored#
#
# READ IN DATA#
#
#weights data#
weights = read.csv(weights_file, header = T)#
head(weights)#
#normalise rows so weights sum to 1#
weights <- weights / apply(weights, 1, sum)#
#retrieve the names of the topologies#
topoNames = names(weights)#
#
#window data#
window_data = read.table(window_data_file)#
colnames(window_data) = c('window', 'start', 'end')#
window_data$scaffold = chr#
window_data$mid = apply(window_data[,c('start', 'end')], 1, mean) #
# window_data$mid = window_data$mid/1e6#
head(window_data)#
#exclude any rows where data is missing#
good_rows = which(is.na(apply(weights,1,sum)) == F)#
weights <- weights[good_rows,]#
window_data = window_data[good_rows,]#
#
######### plot full set of toplogies
#plot means#
mod.cols = cols#
mod.cols = hue_pal(h=1:3)#
#
sums = apply(weights, 2, sum) / 207#
contrib.df = data.frame(contrib = sums)#
contrib.df$topo=factor(rownames(contrib.df), levels=rownames(contrib.df)) #so ggplot knows they are ordered factors#
topoNums = sub("topo", "", contrib.df$topo)#
contrib.df$topoNum = factor(topoNums, levels=topoNums)#
contrib.df$color = mod.cols[1:nrow(contrib.df)]
#plot simple line plot#
dim(weights)#
line.cols = hue_pal()(3)#
LWD=2#
weights_smooth$mb = window_data$mid / 1e6#
norm.breaks = c(3.5, 18.9)#
lp = ggplot(data= weights_smooth) + #
	geom_vline(xintercept= norm.breaks[1], lty=2, lwd=0.8, color='grey') + #
	geom_vline(xintercept= norm.breaks[2], lty=2, lwd=0.8,color='grey') +#
	geom_line(aes(x=mb,y=topo3), col=line.cols[2], lwd=LWD) +#
	geom_line(aes(x=mb,y=topo2), col=line.cols[3], lwd=LWD) +#
	geom_line(aes(x=mb,y=topo1), col=line.cols[1], lwd=LWD) + #
	labs(y="Weight", x="Position (Mb)") + #
	scale_y_continuous(breaks=c(0,0.5, 1)) +#
	scale_x_continuous(breaks=c(0,10,20))#
plot(lp)
# #use loess to smooth weights.#
span = 0.2#
weights_smooth <- smooth_df(x=window_data$mid,weights,col.names=colnames(weights),span=span, min=0, max=1,weights=window_data$sites)#
#rescale to sum to 1#
weights_smooth <- weights_smooth / apply(weights_smooth, 1, sum)#
reorder = colnames(weights_smooth)#
reorder[3] = colnames(weights_smooth)[2]#
reorder[2] = colnames(weights_smooth)[3]#
weights_smooth = weights_smooth[,reorder]
#plot simple line plot#
dim(weights)#
line.cols = hue_pal()(3)#
LWD=2#
weights_smooth$mb = window_data$mid / 1e6#
norm.breaks = c(3.5, 18.9)#
lp = ggplot(data= weights_smooth) + #
	geom_vline(xintercept= norm.breaks[1], lty=2, lwd=0.8, color='grey') + #
	geom_vline(xintercept= norm.breaks[2], lty=2, lwd=0.8,color='grey') +#
	geom_line(aes(x=mb,y=topo3), col=line.cols[2], lwd=LWD) +#
	geom_line(aes(x=mb,y=topo2), col=line.cols[3], lwd=LWD) +#
	geom_line(aes(x=mb,y=topo1), col=line.cols[1], lwd=LWD) + #
	labs(y="Weight", x="Position (Mb)") + #
	scale_y_continuous(breaks=c(0,0.5, 1)) +#
	scale_x_continuous(breaks=c(0,10,20))#
plot(lp)
g=ggplot_weights(weights_dataframe=weights_smooth, positions=window_data$mid/1e6, line_cols=mod.cols, fill_cols=mod.cols, xlim =c(1, max(window_data$end)),stacked=T, xlab = "Position (Mb)", draw.legend=F)
mod.cols
mod.cols = cols
g=ggplot_weights(weights_dataframe=weights_smooth, positions=window_data$mid/1e6, line_cols=mod.cols, fill_cols=mod.cols, xlim =c(1, max(window_data$end)),stacked=T, xlab = "Position (Mb)", draw.legend=F)
#plot means#
mod.cols = cols#
#
sums = apply(weights, 2, sum) / 207#
contrib.df = data.frame(contrib = sums)#
contrib.df$topo=factor(rownames(contrib.df), levels=rownames(contrib.df)) #so ggplot knows they are ordered factors#
topoNums = sub("topo", "", contrib.df$topo)#
contrib.df$topoNum = factor(topoNums, levels=topoNums)#
contrib.df$color = mod.cols[1:nrow(contrib.df)]#
bp=barplot(mns, col=cols[1:length(mns)])#
decide mean cutoff you want to use#
# gbp = ggplot(contrib.df) + geom_bar(aes(y=contrib,x=topoNum, fill=topo), stat='identity') + scale_fill_manual(values=contrib.df$color) + theme(legend.pos='none') + labs(x="Topology", y="Weight Sum")# + geom_hline(yintercept=CUT, lty=2, lwd=0.25)#
# plot(gbp)#
# #use loess to smooth weights.#
span = 0.2#
weights_smooth <- smooth_df(x=window_data$mid,weights,col.names=colnames(weights),span=span, min=0, max=1,weights=window_data$sites)#
#rescale to sum to 1#
weights_smooth <- weights_smooth / apply(weights_smooth, 1, sum)#
reorder = colnames(weights_smooth)#
reorder[3] = colnames(weights_smooth)[2]#
reorder[2] = colnames(weights_smooth)[3]#
weights_smooth = weights_smooth[,reorder]
# #plot#
g=ggplot_weights(weights_dataframe=weights_smooth, positions=window_data$mid/1e6, line_cols=mod.cols, fill_cols=mod.cols, xlim =c(1, max(window_data$end)),stacked=T, xlab = "Position (Mb)", draw.legend=F)
#SUPPLEMENTARY 2MB FIGURE PIECE#
x = seq(0, 20, by = 2)#
y1 = rep(0, length(xs))#
y2 = rep(0.5, length(xs))#
d = data.frame(x, y1, y2)#
sp = ggplot(data = d) + #
	theme(axis.ticks.y=element_blank(),axis.text.y=element_blank(),#
		axis.ticks.x=element_blank(),axis.text.x=element_blank()) +#
	lims(y=c(0,4), x=c(0,20)) + #
	geom_segment(data=d, aes(x = x, y = y1, xend = x, yend = y2), lwd=0.5) #
plot(sp)
save(topos, weights, weights_smooth, window_data, lp, file="~/gitreps/pungitius_sex_chromosome/figure_plotting/Y_topo_weighting.Rdata")
topos = read.table(topoFile)
getwd()
head(weights)
tail(weights)
plot(weights$topo3~window_data$sites)
head(window_data)
plot(weights$topo3~window_data$mid)
topos = read.table(topoFile)
rm(list=ls)
rm(list=ls())
library(ggplot2)#
library(cowplot)#
library(scales)#
source("~/gitreps/stickle_back_sex_chromosomes/scripts/twisst_plotting_functions.R")#
setwd('~/gitreps/pungitius_sex_chromosome/gene_trees/Y_inference/twisst') #new one with just Yoshida (use this one)#
#
#SET FILE NAMES#
#
#weights file with a column for each topology#
#note the topologies are saved in the working directory#
weights_file <- "weights1_chrXII.csv"#
#coordinates file for each window#
window_data_file <- "chrXII_w100000_s100000_windowData.tsv"; chr="chrXII"#
# READ IN DATA#
#
#weights data#
weights = read.csv(weights_file, header = T)#
head(weights)#
#normalise rows so weights sum to 1#
weights <- weights / apply(weights, 1, sum)#
#retrieve the names of the topologies#
topoNames = names(weights)#
#
#window data#
window_data = read.table(window_data_file)#
colnames(window_data) = c('window', 'start', 'end')#
window_data$scaffold = chr#
window_data$mid = apply(window_data[,c('start', 'end')], 1, mean) #
# window_data$mid = window_data$mid/1e6#
head(window_data)#
#exclude any rows where data is missing#
good_rows = which(is.na(apply(weights,1,sum)) == F)#
weights <- weights[good_rows,]#
window_data = window_data[good_rows,]#
#
######### plot full set of toplogies ########
#
#plot means#
mod.cols = cols#
#
sums = apply(weights, 2, sum) / 207#
contrib.df = data.frame(contrib = sums)#
contrib.df$topo=factor(rownames(contrib.df), levels=rownames(contrib.df)) #so ggplot knows they are ordered factors#
topoNums = sub("topo", "", contrib.df$topo)#
contrib.df$topoNum = factor(topoNums, levels=topoNums)#
contrib.df$color = mod.cols[1:nrow(contrib.df)]#
bp=barplot(mns, col=cols[1:length(mns)])#
decide mean cutoff you want to use#
# gbp = ggplot(contrib.df) + geom_bar(aes(y=contrib,x=topoNum, fill=topo), stat='identity') + scale_fill_manual(values=contrib.df$color) + theme(legend.pos='none') + labs(x="Topology", y="Weight Sum")# + geom_hline(yintercept=CUT, lty=2, lwd=0.25)#
# plot(gbp)#
# #use loess to smooth weights.#
span = 0.2#
weights_smooth <- smooth_df(x=window_data$mid,weights,col.names=colnames(weights),span=span, min=0, max=1,weights=window_data$sites)#
#rescale to sum to 1#
weights_smooth <- weights_smooth / apply(weights_smooth, 1, sum)#
reorder = colnames(weights_smooth)#
reorder[3] = colnames(weights_smooth)[2]#
reorder[2] = colnames(weights_smooth)[3]#
weights_smooth = weights_smooth[,reorder]#
#plot simple line plot#
dim(weights)#
line.cols = hue_pal()(3)#
LWD=2#
weights_smooth$mb = window_data$mid / 1e6#
norm.breaks = c(3.5, 18.9)#
lp = ggplot(data= weights_smooth) + #
	geom_vline(xintercept= norm.breaks[1], lty=2, lwd=0.8, color='grey') + #
	geom_vline(xintercept= norm.breaks[2], lty=2, lwd=0.8,color='grey') +#
	geom_line(aes(x=mb,y=topo3), col=line.cols[2], lwd=LWD) +#
	geom_line(aes(x=mb,y=topo2), col=line.cols[3], lwd=LWD) +#
	geom_line(aes(x=mb,y=topo1), col=line.cols[1], lwd=LWD) + #
	labs(y="Weight", x="Position (Mb)") + #
	scale_y_continuous(breaks=c(0,0.5, 1)) +#
	scale_x_continuous(breaks=c(0,10,20))#
plot(lp)
bp=barplot(mns, col=cols[1:length(mns)])
bp=barplot(mns, col=cols[1:length(sums)])
bp=barplot(sums, col=cols[1:length(sums)])
rm(list=ls())
library(ggplot2)#
library(cowplot)#
library(scales)#
source("~/gitreps/stickle_back_sex_chromosomes/scripts/twisst_plotting_functions.R")#
setwd('~/gitreps/pungitius_sex_chromosome/gene_trees/Y_inference/twisst') #new one with just Yoshida (use this one)#
#
#SET FILE NAMES#
#
#weights file with a column for each topology#
#note the topologies are saved in the working directory#
weights_file <- "weights1_chrXII.csv"#
#coordinates file for each window#
window_data_file <- "chrXII_w100000_s100000_windowData.tsv"; chr="chrXII"#
# READ IN DATA#
#
#weights data#
weights = read.csv(weights_file, header = T)#
head(weights)#
#normalise rows so weights sum to 1#
weights <- weights / apply(weights, 1, sum)#
#retrieve the names of the topologies#
topoNames = names(weights)#
#
#window data#
window_data = read.table(window_data_file)#
colnames(window_data) = c('window', 'start', 'end')#
window_data$scaffold = chr#
window_data$mid = apply(window_data[,c('start', 'end')], 1, mean) #
# window_data$mid = window_data$mid/1e6#
head(window_data)#
#exclude any rows where data is missing#
good_rows = which(is.na(apply(weights,1,sum)) == F)#
weights <- weights[good_rows,]#
window_data = window_data[good_rows,]#
#
## PLOT RESULTS#
#
#plot means for the chromosome#
mod.cols = cols#
sums = apply(weights, 2, sum) / 207#
contrib.df = data.frame(contrib = sums)#
contrib.df$topo=factor(rownames(contrib.df), levels=rownames(contrib.df)) #so ggplot knows they are ordered factors#
topoNums = sub("topo", "", contrib.df$topo)#
contrib.df$topoNum = factor(topoNums, levels=topoNums)#
contrib.df$color = mod.cols[1:nrow(contrib.df)]#
bp=barplot(sums, col=cols[1:length(sums)])#
decide mean cutoff you want to use#
# #use loess to smooth weights.#
span = 0.2#
weights_smooth <- smooth_df(x=window_data$mid,weights,col.names=colnames(weights),span=span, min=0, max=1,weights=window_data$sites)#
#rescale to sum to 1#
weights_smooth <- weights_smooth / apply(weights_smooth, 1, sum)#
reorder = colnames(weights_smooth)#
reorder[3] = colnames(weights_smooth)[2]#
reorder[2] = colnames(weights_smooth)[3]#
weights_smooth = weights_smooth[,reorder]#
#plot simple line plot#
dim(weights)#
line.cols = hue_pal()(3)#
LWD=2#
weights_smooth$mb = window_data$mid / 1e6#
norm.breaks = c(3.5, 18.9)#
lp = ggplot(data= weights_smooth) + #
	geom_vline(xintercept= norm.breaks[1], lty=2, lwd=0.8, color='grey') + #
	geom_vline(xintercept= norm.breaks[2], lty=2, lwd=0.8,color='grey') +#
	geom_line(aes(x=mb,y=topo3), col=line.cols[2], lwd=LWD) +#
	geom_line(aes(x=mb,y=topo2), col=line.cols[3], lwd=LWD) +#
	geom_line(aes(x=mb,y=topo1), col=line.cols[1], lwd=LWD) + #
	labs(y="Weight", x="Position (Mb)") + #
	scale_y_continuous(breaks=c(0,0.5, 1)) +#
	scale_x_continuous(breaks=c(0,10,20))#
plot(lp)#
# #plot the twisst way#
g=ggplot_weights(weights_dataframe=weights_smooth, positions=window_data$mid/1e6, line_cols=mod.cols, fill_cols=mod.cols, xlim =c(1, max(window_data$end)),stacked=T, xlab = "Position (Mb)", draw.legend=F)
g=ggplot_weights(weights_dataframe=weights_smooth, positions=window_data$mid/1e6, line_cols=mod.cols, fill_cols=mod.cols, xlim =c(1, max(window_data$end)),stacked=T, xlab = "Position (Mb)", draw.legend=F)
mod.cols
# #use loess to smooth weights.#
span = 0.2#
weights_smooth <- smooth_df(x=window_data$mid,weights,col.names=colnames(weights),span=span, min=0, max=1,weights=window_data$sites)#
#rescale to sum to 1#
weights_smooth <- weights_smooth / apply(weights_smooth, 1, sum)#
reorder = colnames(weights_smooth)#
reorder[3] = colnames(weights_smooth)[2]#
reorder[2] = colnames(weights_smooth)[3]#
weights_smooth = weights_smooth[,reorder]
g=ggplot_weights(weights_dataframe=weights_smooth, positions=window_data$mid/1e6, line_cols=mod.cols, fill_cols=mod.cols, xlim =c(1, max(window_data$end)),stacked=T, xlab = "Position (Mb)", draw.legend=F)
line.cols = hue_pal()(3)
line.cols
g=ggplot_weights(weights_dataframe=weights_smooth, positions=window_data$mid/1e6, line_cols= line.cols, fill_cols=mod.cols, xlim =c(1, max(window_data$end)),stacked=T, xlab = "Position (Mb)", draw.legend=F)
#plot simple line plot#
dim(weights)#
line.cols = hue_pal()(3)#
LWD=2#
weights_smooth$mb = window_data$mid / 1e6#
norm.breaks = c(3.5, 18.9)#
lp = ggplot(data= weights_smooth) + #
	geom_vline(xintercept= norm.breaks[1], lty=2, lwd=0.8, color='grey') + #
	geom_vline(xintercept= norm.breaks[2], lty=2, lwd=0.8,color='grey') +#
	geom_line(aes(x=mb,y=topo3), col=line.cols[2], lwd=LWD) +#
	geom_line(aes(x=mb,y=topo2), col=line.cols[3], lwd=LWD) +#
	geom_line(aes(x=mb,y=topo1), col=line.cols[1], lwd=LWD) + #
	labs(y="Weight", x="Position (Mb)") + #
	scale_y_continuous(breaks=c(0,0.5, 1)) +#
	scale_x_continuous(breaks=c(0,10,20))#
plot(lp)
g=ggplot_weights(weights_dataframe=weights_smooth, positions=window_data$mid/1e6, line_cols= line.cols, fill_cols=mod.cols, xlim =c(1, max(window_data$end)),stacked=T, xlab = "Position (Mb)", draw.legend=F)
# #use loess to smooth weights.#
span = 0.2#
weights_smooth <- smooth_df(x=window_data$mid,weights,col.names=colnames(weights),span=span, min=0, max=1,weights=window_data$sites)#
#rescale to sum to 1#
weights_smooth <- weights_smooth / apply(weights_smooth, 1, sum)#
reorder = colnames(weights_smooth)#
reorder[3] = colnames(weights_smooth)[2]#
reorder[2] = colnames(weights_smooth)[3]#
weights_smooth = weights_smooth[,reorder]#
# #plot the twisst way#
g=ggplot_weights(weights_dataframe=weights_smooth, positions=window_data$mid/1e6, line_cols= line.cols, fill_cols=mod.cols, xlim =c(1, max(window_data$end)),stacked=T, xlab = "Position (Mb)", draw.legend=F)
#plot simple line plot#
dim(weights)#
line.cols = hue_pal()(3)#
LWD=2#
weights_smooth$mb = window_data$mid / 1e6#
norm.breaks = c(3.5, 18.9)#
lp = ggplot(data= weights_smooth) + #
	geom_vline(xintercept= norm.breaks[1], lty=2, lwd=0.8, color='grey') + #
	geom_vline(xintercept= norm.breaks[2], lty=2, lwd=0.8,color='grey') +#
	geom_line(aes(x=mb,y=topo3), col=line.cols[2], lwd=LWD) +#
	geom_line(aes(x=mb,y=topo2), col=line.cols[3], lwd=LWD) +#
	geom_line(aes(x=mb,y=topo1), col=line.cols[1], lwd=LWD) + #
	labs(y="Weight", x="Position (Mb)") + #
	scale_y_continuous(breaks=c(0,0.5, 1)) +#
	scale_x_continuous(breaks=c(0,10,20))#
plot(lp)
mod.cols = hue_pal()(3)#
sums = apply(weights, 2, sum) / 207#
contrib.df = data.frame(contrib = sums)#
contrib.df$topo=factor(rownames(contrib.df), levels=rownames(contrib.df)) #so ggplot knows they are ordered factors#
topoNums = sub("topo", "", contrib.df$topo)#
contrib.df$topoNum = factor(topoNums, levels=topoNums)#
contrib.df$color = mod.cols[1:nrow(contrib.df)]#
bp=barplot(sums, col=cols[1:length(sums)])#
decide mean cutoff you want to use
mod.cols = hue_pal()(3)
bp=barplot(sums, col= mod.cols[1:length(sums)])
# #use loess to smooth weights.#
span = 0.2#
weights_smooth <- smooth_df(x=window_data$mid,weights,col.names=colnames(weights),span=span, min=0, max=1,weights=window_data$sites)#
#rescale to sum to 1#
weights_smooth <- weights_smooth / apply(weights_smooth, 1, sum)#
reorder = colnames(weights_smooth)#
reorder[3] = colnames(weights_smooth)[2]#
reorder[2] = colnames(weights_smooth)[3]#
weights_smooth = weights_smooth[,reorder]#
# #plot the twisst way#
g=ggplot_weights(weights_dataframe=weights_smooth, positions=window_data$mid/1e6, line_cols= line.cols, fill_cols=mod.cols, xlim =c(1, max(window_data$end)),stacked=T, xlab = "Position (Mb)", draw.legend=F)
#plot means for the chromosome#
mod.cols = cols#
sums = apply(weights, 2, sum) / 207#
contrib.df = data.frame(contrib = sums)#
contrib.df$topo=factor(rownames(contrib.df), levels=rownames(contrib.df)) #so ggplot knows they are ordered factors#
topoNums = sub("topo", "", contrib.df$topo)#
contrib.df$topoNum = factor(topoNums, levels=topoNums)#
contrib.df$color = mod.cols[1:nrow(contrib.df)]#
bp=barplot(sums, col= mod.cols[1:length(sums)])#
# #use loess to smooth weights.#
span = 0.2#
weights_smooth <- smooth_df(x=window_data$mid,weights,col.names=colnames(weights),span=span, min=0, max=1,weights=window_data$sites)#
#rescale to sum to 1#
weights_smooth <- weights_smooth / apply(weights_smooth, 1, sum)#
reorder = colnames(weights_smooth)#
reorder[3] = colnames(weights_smooth)[2]#
reorder[2] = colnames(weights_smooth)[3]#
weights_smooth = weights_smooth[,reorder]#
# #plot the twisst way#
mod.cols = hue_pal()(3) #switch to cowplot colors#
g=ggplot_weights(weights_dataframe=weights_smooth, positions=window_data$mid/1e6, line_cols= line.cols, fill_cols=mod.cols, xlim =c(1, max(window_data$end)),stacked=T, xlab = "Position (Mb)", draw.legend=F)
#plot simple line plot#
dim(weights)#
line.cols = hue_pal()(3) #switch to cowplot colors#
LWD=2#
weights_smooth$mb = window_data$mid / 1e6#
norm.breaks = c(3.5, 18.9)#
lp = ggplot(data= weights_smooth) + #
	geom_vline(xintercept= norm.breaks[1], lty=2, lwd=0.8, color='grey') + #
	geom_vline(xintercept= norm.breaks[2], lty=2, lwd=0.8,color='grey') +#
	geom_line(aes(x=mb,y=topo3), col=line.cols[2], lwd=LWD) +#
	geom_line(aes(x=mb,y=topo2), col=line.cols[3], lwd=LWD) +#
	geom_line(aes(x=mb,y=topo1), col=line.cols[1], lwd=LWD) + #
	labs(y="Weight", x="Position (Mb)") + #
	scale_y_continuous(breaks=c(0,0.5, 1)) +#
	scale_x_continuous(breaks=c(0,10,20))#
plot(lp)
#save for convenient re-plotting#
save(weights, weights_smooth, window_data, lp, file="~/gitreps/pungitius_sex_chromosome/figure_plotting/Y_topo_weighting.Rdata")
